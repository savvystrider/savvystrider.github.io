{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Manish writes about it... Let's learn about APIs! As a technical writer, I noticed how many jobs these days involve the documentation of APIs somehow. Unfortunately, trying to understand what an API is felt too complicated. There are a lot of different kinds of APIs and there are lots of explanations. Plus, learning about APIs means you have to learn about other things that are not APIs. If you're unfamiliar with programming or computer science, it can get a bit overwhelming. For me, personally, it helped to keep track of each individual branch of knowledge, with the hope that repetition would cause all of it to make sense at some point.","title":"Home"},{"location":"#manish-writes-about-it","text":"Let's learn about APIs! As a technical writer, I noticed how many jobs these days involve the documentation of APIs somehow. Unfortunately, trying to understand what an API is felt too complicated. There are a lot of different kinds of APIs and there are lots of explanations. Plus, learning about APIs means you have to learn about other things that are not APIs. If you're unfamiliar with programming or computer science, it can get a bit overwhelming. For me, personally, it helped to keep track of each individual branch of knowledge, with the hope that repetition would cause all of it to make sense at some point.","title":"Manish writes about it..."},{"location":"about/","text":"About This is a website I made with Material for MkDocs, Git, GitHub, Visual Studio Code, and Markdown. This website is primarily about the study of REST APIs and REST API documentation; however, many other topics are covered, including: APIs (in general) Postman Git GitHub Hugo / Jekyll / MkDocs Markdown JSON XML cURL My study of REST APIs began with the course Documenting APIs: A guide for technical writers and engineers by fellow technical writer Tom Johnson. It then expanded to the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"About"},{"location":"about/#about","text":"This is a website I made with Material for MkDocs, Git, GitHub, Visual Studio Code, and Markdown. This website is primarily about the study of REST APIs and REST API documentation; however, many other topics are covered, including: APIs (in general) Postman Git GitHub Hugo / Jekyll / MkDocs Markdown JSON XML cURL My study of REST APIs began with the course Documenting APIs: A guide for technical writers and engineers by fellow technical writer Tom Johnson. It then expanded to the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"About"},{"location":"activity-using-json-to-describe-menu-structure/","text":"Let's say we have the following menu design: File View Open Zoom In New Zoom Out Close Original View We have two menu columns ( File and View ) that we can represent in JSON: [ { \"header\" : \"File\" , \"items\" :[ { \"id\" : \"Open\" , \"label\" : \"Open\" }, { \"id\" : \"New\" , \"label\" : \"New\" }, { \"id\" : \"Close\" , \"label\" : \"Close\" } ] }, { \"header\" : \"View\" , \"items\" :[ { \"id\" : \"ZoomIn\" , \"label\" : \"Zoom In\" }, { \"id\" : \"ZoomOut\" , \"label\" : \"Zoom Out\" }, { \"id\" : \"OriginalView\" , \"label\" : \"Original View\" } ] } ] We can also represent the data in the following table: - indentation indicates level of nesting - &nbsp; is used for spaces. Element Description Type Top level Menu columns Array of menu column objects header Name of the column String items List of menu items under the column Array of menu items id ID of the menu item String label Label that is displayed in the user interface String We can also create separate tables for each object type: Menu array: Represents a menu Element Description Type top level Menu columns Array of menu columns Menu column object: Represents a column in a menu Element Description Type header The name of the column. String items A list of menu items under the column. Array of menu items Menu item object: Represents something you can see in the menu Element Description Type id The ID of the menu item String label The label that is displayed in the user interface String The above activity is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Activity - Using JSON to describe the structure of a menu"},{"location":"api-vocabulary/","text":"API A set of definitions and protocols that allow technology products and services to communicate via the internet. REST API A web service that makes requests for resources through URL paths. SOAP API A web service that relies on a strict XML protocol to define the message exchange format for requests and responses. Web service A web-based application that provides resources in a format consumable by other computers. Web service API Sends and receives messages across the web using HTTP to transport the request and response.","title":"API vocabulary"},{"location":"api-vocabulary/#api","text":"A set of definitions and protocols that allow technology products and services to communicate via the internet.","title":"API"},{"location":"api-vocabulary/#rest-api","text":"A web service that makes requests for resources through URL paths.","title":"REST API"},{"location":"api-vocabulary/#soap-api","text":"A web service that relies on a strict XML protocol to define the message exchange format for requests and responses.","title":"SOAP API"},{"location":"api-vocabulary/#web-service","text":"A web-based application that provides resources in a format consumable by other computers.","title":"Web service"},{"location":"api-vocabulary/#web-service-api","text":"Sends and receives messages across the web using HTTP to transport the request and response.","title":"Web service API"},{"location":"documenting-json-requests/","text":"Previously, we documented JSON responses using a table. To document JSON requests, we can use the same table but with an extra column called Required . When you send a request, not all elements are required. If an element is optional, the developer needs to know. Indicates if the element is necessary for the request. The columns of the table will include: Element : the key in the key-value pair. Description : a sentence fragment, usually a descriptive noun. Type : number, string, Boolean, array (specify what it's an array of), or object (what kind of object) Required : choose either required or optional to make it easier for developers to read the table. Notes (optional): additional information (omit if not necessary). Request Example: Adding a Comment { \"comment\" :{ \"userID\" : \"mpatel\" , \"discID\" : 3989384939 , \"time\" : \"2015-02-28 10:04:32\" , \"text\" : \"Well said, Barbara!\" } } Note that time is GMT and also optional. If not included, then it uses the current time when the request is received by the server. Element Description Type Required Notes comment Top level comment data object Required userID ID of the user making the comment string Required discID ID of the discussion that is being commented on string Required time Time that the comment was posted string Optional YYYY-MM-DD HH:MM:SS Greenwich Mean Time. Default is the time the comment is received by the server. text Text of the comment string Required The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Documenting JSON requests"},{"location":"documenting-json-requests/#request-example-adding-a-comment","text":"{ \"comment\" :{ \"userID\" : \"mpatel\" , \"discID\" : 3989384939 , \"time\" : \"2015-02-28 10:04:32\" , \"text\" : \"Well said, Barbara!\" } } Note that time is GMT and also optional. If not included, then it uses the current time when the request is received by the server. Element Description Type Required Notes comment Top level comment data object Required userID ID of the user making the comment string Required discID ID of the discussion that is being commented on string Required time Time that the comment was posted string Optional YYYY-MM-DD HH:MM:SS Greenwich Mean Time. Default is the time the comment is received by the server. text Text of the comment string Required The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Request Example: Adding a Comment"},{"location":"documenting-json-with-nesting/","text":"Previously, in Documenting a single-level response in JSON, we used a table to document a single-level JSON response. To document nesting, you can either indent or create a table for each object type : Indent Each indent indicates a level of nesting. Use the tag &nbsp to create an indent/space in tables. Best for cases where objects are not reused. Takes up less space. The following JSON data is nested and represents song information: { \"song\" :{ \"title\" : \"JSON Lullaby\" , \"artist\" : \"The Instructors\" , \"musicians\" :[ \"Jen Trainer\" , \"John Teacher\" ] } } We can document this data in a table: Element Description Type song Top level song data object title Song title string artist Song artist string musicians A list of musicians that play on the song array of string Create a table for each object type Best for cases where objects are reused. Takes up more space. See: Activity: Using JSON to Describe a Menu Structure for an example. The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Documenting JSON with nesting"},{"location":"documenting-json-with-nesting/#indent","text":"Each indent indicates a level of nesting. Use the tag &nbsp to create an indent/space in tables. Best for cases where objects are not reused. Takes up less space. The following JSON data is nested and represents song information: { \"song\" :{ \"title\" : \"JSON Lullaby\" , \"artist\" : \"The Instructors\" , \"musicians\" :[ \"Jen Trainer\" , \"John Teacher\" ] } } We can document this data in a table: Element Description Type song Top level song data object title Song title string artist Song artist string musicians A list of musicians that play on the song array of string","title":"Indent"},{"location":"documenting-json-with-nesting/#create-a-table-for-each-object-type","text":"Best for cases where objects are reused. Takes up more space. See: Activity: Using JSON to Describe a Menu Structure for an example. The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Create a table for each object type"},{"location":"documenting-single-level-response-in-json/","text":"JSON with no nesting is the easiest to document because all data is one level. For this example, we have one object in curly braces {} with four key-value pairs . { \"firstName\" : \"Manish\" , \"lastName\" : \"Patel\" , \"age\" : 16 , \"fullTime\" : true } We can document this data using a table. The columns will include: Element : the key in the key-value pair. Description : a sentence fragment, usually a descriptive noun. Type : number, string, Boolean, array (specify what it's an array of), or object (what kind of object) Notes (optional): additional information (omit if not necessary). Element Description Type Notes firstName First name String lastName Last name String age Age, in years Number fullTime True, if working full-time; otherwise, false. Boolean Full-time is defined as 40 hours per week. The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Documenting a single-level response in JSON"},{"location":"five-common-sections-in-rest-api-docs/","text":"1. Description of resources Resources (information) are the target of an HTTP request. 2. Endpoints and methods Endpoints : how to access the resource. HTTP methods : the allowed interactions with the resource. 3. Parameters Options for retrieving resources that can be passed along with the endpoint (such as specifying the response format or the amount returned) to influence the response. 4. Example of a request An example of a request that uses the endpoint and shows configured parameters. 5. Example of a response and schema Example of a response : an example of a response from the request example. Example of a schema : defines all possible elements in the response. Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"Five common sections in REST API documents"},{"location":"five-common-sections-in-rest-api-docs/#1-description-of-resources","text":"Resources (information) are the target of an HTTP request.","title":"1. Description of resources"},{"location":"five-common-sections-in-rest-api-docs/#2-endpoints-and-methods","text":"Endpoints : how to access the resource. HTTP methods : the allowed interactions with the resource.","title":"2. Endpoints and methods"},{"location":"five-common-sections-in-rest-api-docs/#3-parameters","text":"Options for retrieving resources that can be passed along with the endpoint (such as specifying the response format or the amount returned) to influence the response.","title":"3. Parameters"},{"location":"five-common-sections-in-rest-api-docs/#4-example-of-a-request","text":"An example of a request that uses the endpoint and shows configured parameters.","title":"4. Example of a request"},{"location":"five-common-sections-in-rest-api-docs/#5-example-of-a-response-and-schema","text":"Example of a response : an example of a response from the request example. Example of a schema : defines all possible elements in the response.","title":"5. Example of a response and schema"},{"location":"five-common-sections-in-rest-api-docs/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"Sources"},{"location":"rest-api-vocabulary/","text":"API A set of definitions and protocols that allow technology products and services to communicate via the internet. Application state Client Endpoint HATEOAS HTTP HTTP methods / verbs Resource REST Representational State Transfer REST API A web service that makes requests for resources through URL paths. Server State Stateless URL URI","title":"REST API vocabulary"},{"location":"rest-api-vocabulary/#api","text":"A set of definitions and protocols that allow technology products and services to communicate via the internet.","title":"API"},{"location":"rest-api-vocabulary/#application-state","text":"","title":"Application state"},{"location":"rest-api-vocabulary/#client","text":"","title":"Client"},{"location":"rest-api-vocabulary/#endpoint","text":"","title":"Endpoint"},{"location":"rest-api-vocabulary/#hateoas","text":"","title":"HATEOAS"},{"location":"rest-api-vocabulary/#http","text":"","title":"HTTP"},{"location":"rest-api-vocabulary/#http-methods-verbs","text":"","title":"HTTP methods / verbs"},{"location":"rest-api-vocabulary/#resource","text":"","title":"Resource"},{"location":"rest-api-vocabulary/#rest","text":"Representational State Transfer","title":"REST"},{"location":"rest-api-vocabulary/#rest-api","text":"A web service that makes requests for resources through URL paths.","title":"REST API"},{"location":"rest-api-vocabulary/#server","text":"","title":"Server"},{"location":"rest-api-vocabulary/#state","text":"","title":"State"},{"location":"rest-api-vocabulary/#stateless","text":"","title":"Stateless"},{"location":"rest-api-vocabulary/#url","text":"","title":"URL"},{"location":"rest-api-vocabulary/#uri","text":"","title":"URI"},{"location":"the-syntax-of-uris/","text":"A URI is a string that refers to a resource. The most common URIs are URLs , which identify the resource by giving its location on the Web. A URL is composed of different parts; some are mandatory and others are optional. Scheme or protocol http://example.com http:// is the protocol . It indicates which protocol (HTTP or HTTPS) the browser must use. Authority http://example.com www.example.com is the domain name, or authority , that governs the namespace. It indicates which Web server is being requested. Port http://www.example.com:80/path :80 is the port . It indicates the technical \"gate\" used to access the resources on the web server. It is usually omitted if the web server uses the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) to grant access to its resources. Path http://www.example.com:80/path/to/myfile.html?key1=value1 /path/to/myfile.html is the path to the resource on the Web server. Previously, a path like this represented a physical file location on a web server. Now, it is mostly an abstraction handled by web servers without any physical reality. Query http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2 key1=value1&key2=value2 are extra parameters provided to the web server. The parameters are a list of key/value pairs separated with the & symbol. Parameters define the search criteria used by the server to find a set of matching resources. The ? before the key/value pairs indicates the start of the query string . Fragment http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument #SomewhereInTheDocument is an anchor to another part of the resource itself. An anchor is similar to a \"bookmark\" inside the resource, giving the browser the directions to show the content located at that \"bookmarked\" spot. Sources MDN Web Docs Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"Introduction to RESTful Web services\" - IBM Developer","title":"The syntax of URIs"},{"location":"the-syntax-of-uris/#scheme-or-protocol","text":"http://example.com http:// is the protocol . It indicates which protocol (HTTP or HTTPS) the browser must use.","title":"Scheme or protocol"},{"location":"the-syntax-of-uris/#authority","text":"http://example.com www.example.com is the domain name, or authority , that governs the namespace. It indicates which Web server is being requested.","title":"Authority"},{"location":"the-syntax-of-uris/#port","text":"http://www.example.com:80/path :80 is the port . It indicates the technical \"gate\" used to access the resources on the web server. It is usually omitted if the web server uses the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) to grant access to its resources.","title":"Port"},{"location":"the-syntax-of-uris/#path","text":"http://www.example.com:80/path/to/myfile.html?key1=value1 /path/to/myfile.html is the path to the resource on the Web server. Previously, a path like this represented a physical file location on a web server. Now, it is mostly an abstraction handled by web servers without any physical reality.","title":"Path"},{"location":"the-syntax-of-uris/#query","text":"http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2 key1=value1&key2=value2 are extra parameters provided to the web server. The parameters are a list of key/value pairs separated with the & symbol. Parameters define the search criteria used by the server to find a set of matching resources. The ? before the key/value pairs indicates the start of the query string .","title":"Query"},{"location":"the-syntax-of-uris/#fragment","text":"http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument #SomewhereInTheDocument is an anchor to another part of the resource itself. An anchor is similar to a \"bookmark\" inside the resource, giving the browser the directions to show the content located at that \"bookmarked\" spot.","title":"Fragment"},{"location":"the-syntax-of-uris/#sources","text":"MDN Web Docs Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"Introduction to RESTful Web services\" - IBM Developer","title":"Sources"},{"location":"what-are-arrays-and-objects-in-json/","text":"JSON has two types of basic structures: arrays and objects . What is an array? An array is an ordered sequence of zero or more values enclosed in brackets [] and separated by commas. An array of numbers: [ 4 , 6 , 23.1 , -4 , 0 , 56 ] An array of strings: [ \"red\" , \"green\" , \"blue\" ] Mixed array with a Boolean value and a null value: [ 65 , \"toast\" , true , 21 , null , 100 ] {{< alert >}} Data values can be mixed. {{< /alert >}} What is an object? {{< alert >}} An object is an unordered collection of zero or more name/value pairs enclosed in curly braces {} and separated by commas. {{< /alert >}} About objects Objects are JSON's dictionaries , meaning they consist of keys and values , where you can look up a value with a given key. Keys and values are separated from each other with a colon. Key-value pairs are separated with commas. Keys and values can be any data type, although strings are the most common. An object in curly brackets that holds values for \u201cred\u201d, \u201cgreen\u201d, and \u201cblue\u201d. { \"red\" : 205 , \"green\" : 123 , \"blue\" : 53 } The first key is the string \"red\" , which has a value of 205 . Keys and values are separated by a colon. Key-value pairs are separated with commas. Data about a person: { \"firstName\" : \"Manish\" , \"lastName\" : \"Patel\" , \"employed\" : false } \"firstName\" = key; \"Manish\" = value (string) \"lastName\" = key; \"Patel\" = value (string) \"employed\" = key; false = value (Boolean) Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"What are arrays and objects?"},{"location":"what-are-arrays-and-objects-in-json/#what-is-an-array","text":"An array is an ordered sequence of zero or more values enclosed in brackets [] and separated by commas. An array of numbers: [ 4 , 6 , 23.1 , -4 , 0 , 56 ] An array of strings: [ \"red\" , \"green\" , \"blue\" ] Mixed array with a Boolean value and a null value: [ 65 , \"toast\" , true , 21 , null , 100 ] {{< alert >}} Data values can be mixed. {{< /alert >}}","title":"What is an array?"},{"location":"what-are-arrays-and-objects-in-json/#what-is-an-object","text":"{{< alert >}} An object is an unordered collection of zero or more name/value pairs enclosed in curly braces {} and separated by commas. {{< /alert >}}","title":"What is an object?"},{"location":"what-are-arrays-and-objects-in-json/#about-objects","text":"Objects are JSON's dictionaries , meaning they consist of keys and values , where you can look up a value with a given key. Keys and values are separated from each other with a colon. Key-value pairs are separated with commas. Keys and values can be any data type, although strings are the most common. An object in curly brackets that holds values for \u201cred\u201d, \u201cgreen\u201d, and \u201cblue\u201d. { \"red\" : 205 , \"green\" : 123 , \"blue\" : 53 } The first key is the string \"red\" , which has a value of 205 . Keys and values are separated by a colon. Key-value pairs are separated with commas. Data about a person: { \"firstName\" : \"Manish\" , \"lastName\" : \"Patel\" , \"employed\" : false } \"firstName\" = key; \"Manish\" = value (string) \"lastName\" = key; \"Patel\" = value (string) \"employed\" = key; false = value (Boolean)","title":"About objects"},{"location":"what-are-arrays-and-objects-in-json/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"Sources"},{"location":"what-are-basic-json-data-types/","text":"The basic data types in JSON are referred to as values . Strings Text enclosed in double-quotation marks. \"example\" Numbers Integer (whole) or decimal Positive or negative Zero No quotation marks [1, 2.5, 0, 382] Booleans True or false No quotation marks [true, false, false, true] Null Means \"nothing\" No quotation marks [null] Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"What are the basic JSON data types?"},{"location":"what-are-basic-json-data-types/#strings","text":"Text enclosed in double-quotation marks. \"example\"","title":"Strings"},{"location":"what-are-basic-json-data-types/#numbers","text":"Integer (whole) or decimal Positive or negative Zero No quotation marks [1, 2.5, 0, 382]","title":"Numbers"},{"location":"what-are-basic-json-data-types/#booleans","text":"True or false No quotation marks [true, false, false, true]","title":"Booleans"},{"location":"what-are-basic-json-data-types/#null","text":"Means \"nothing\" No quotation marks [null]","title":"Null"},{"location":"what-are-basic-json-data-types/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"Sources"},{"location":"what-are-http-messages/","text":"HTTP messages are how data is exchanged between a server and a client. - Two types of messages: - requests , sent by the client to trigger an action on the server. - responses , the answer from the server. - Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). - Messages are human-readable. Structure of requests and responses HTTP requests and responses share a similar structure and include: a start-line that describes the request being made, or its success status. Always a single line. optional HTTP headers for specifying the request or describing the body included in the message. Header fields are key-value pairs separated by colons. a blank line indicating all meta-information for the request has been sent. an optional body that contains data associated with the request or the document associated with the response. HTTP Request HTTP Method Defines the operation the client wants to perform. Options include: - GET - POST - PUT - DELETE Path The path of the requested resource. Version Version of HTTP protocol Headers Optional headers to convey additional information for the servers Body A POST method would contain the resource being sent to the server. HTTP Response Version Version of HTTP protocol Status code Indicates whether a specific HTTP request has been successfully completed. Status message A non-authoritative short description of the status code. Headers HTTP headers, like those for requests. Header fields are key-value pairs separated by colons. Body Optional. Contains the fetched resource. Sources MDN Web Docs","title":"What are HTTP messages?"},{"location":"what-are-http-messages/#structure-of-requests-and-responses","text":"HTTP requests and responses share a similar structure and include: a start-line that describes the request being made, or its success status. Always a single line. optional HTTP headers for specifying the request or describing the body included in the message. Header fields are key-value pairs separated by colons. a blank line indicating all meta-information for the request has been sent. an optional body that contains data associated with the request or the document associated with the response.","title":"Structure of requests and responses"},{"location":"what-are-http-messages/#http-request","text":"HTTP Method Defines the operation the client wants to perform. Options include: - GET - POST - PUT - DELETE Path The path of the requested resource. Version Version of HTTP protocol Headers Optional headers to convey additional information for the servers Body A POST method would contain the resource being sent to the server.","title":"HTTP Request"},{"location":"what-are-http-messages/#http-response","text":"Version Version of HTTP protocol Status code Indicates whether a specific HTTP request has been successfully completed. Status message A non-authoritative short description of the status code. Headers HTTP headers, like those for requests. Header fields are key-value pairs separated by colons. Body Optional. Contains the fetched resource.","title":"HTTP Response"},{"location":"what-are-http-messages/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"what-are-http-methods/","text":"HTTP is a request-response protocol between a client and a server. HTTP methods indicate what action should be performed for requesting a specific resource. These methods are often called HTTP verbs . The resource is the noun . CRUD refers to the ways that stored data can be operated. It also refers to the four basic functions of persistent storage and maps to the four major HTTP methods (see below). HTTP request methods can be: - Safe : does not alter the state of the server (read-only operation). - Idempotent : HTTP methods are idempotent if an identical request can be made (once or more) without changing the original result (i.e., no side effects). - Cacheable : the HTTP response can be cached (stored for retrieval), saving a new request to the server. HTTP Methods GET Read / request data from a resource. Safe / idempotent / cacheable POST Create a resource. Not safe / Not idempotent / Not cacheable PUT Update a resource. Not safe / Idempotent / Not cacheable DELETE Remove a resource. Not safe / Idempotent / Not cacheable HEAD Read / request data (same as GET ) from a resource but without a response body. Safe / idempotent / cacheable PATCH Apply partial modifications to a resource. Not safe / Not idempotent / Not cacheable OPTIONS Describe the communication options for a resource. Safe / Idempotent / Not cacheable CONNECT Establish a tunnel to the server identified by a resource. Not safe / Not idempotent / Not cacheable TRACE Perform a message loop-back test along the path to a resource. Safe / Idempotent / Not cacheable Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"What are HTTP methods?"},{"location":"what-are-http-methods/#http-methods","text":"GET Read / request data from a resource. Safe / idempotent / cacheable POST Create a resource. Not safe / Not idempotent / Not cacheable PUT Update a resource. Not safe / Idempotent / Not cacheable DELETE Remove a resource. Not safe / Idempotent / Not cacheable HEAD Read / request data (same as GET ) from a resource but without a response body. Safe / idempotent / cacheable PATCH Apply partial modifications to a resource. Not safe / Not idempotent / Not cacheable OPTIONS Describe the communication options for a resource. Safe / Idempotent / Not cacheable CONNECT Establish a tunnel to the server identified by a resource. Not safe / Not idempotent / Not cacheable TRACE Perform a message loop-back test along the path to a resource. Safe / Idempotent / Not cacheable","title":"HTTP Methods"},{"location":"what-are-http-methods/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"Sources"},{"location":"what-are-http-requests/","text":"HTTP requests are messages sent by the client to initiate an action on the server. Start-line The start-line of HTTP requests contains three elements: 1. HTTP method HTTP verbs indicate the action to be performed. These actions include: - GET : fetch a resource - POST : push data to the server to create a new resource - DELETE : delete a resource from the server - PUT : update a resource on the server 2. Request target Target is usually a URL. Options include: - Absolute path followed by a ? and query string. - This is the most common form and is used with HTTP methods. - Complete URL (absolute form) - Mostly used with GET when connected to a proxy. - Authority component of URL - Consists of the domain name and the port (optional). - Asterisk form - A simple asterisk ( * ) used with OPTIONS , representing the server as a whole. 3. HTTP version Defines the structure of the remaining message, acting as an indicator of the expected version to use for the response. Headers HTTP headers let the client and the server pass additional information with an HTTP request or response. A request header is a type of HTTP header that can be used in a request to provide information about the request context, so that the server can tailor the response. Headers are in key-value pairs separated by a colon. Example: key : value A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100 Body The body is the final part of an HTTP request. Not all requests need one, such as GET , HEAD , DELETE , or OPTIONS . Sources MDN Web Docs","title":"What are HTTP requests?"},{"location":"what-are-http-requests/#start-line","text":"The start-line of HTTP requests contains three elements: 1. HTTP method HTTP verbs indicate the action to be performed. These actions include: - GET : fetch a resource - POST : push data to the server to create a new resource - DELETE : delete a resource from the server - PUT : update a resource on the server 2. Request target Target is usually a URL. Options include: - Absolute path followed by a ? and query string. - This is the most common form and is used with HTTP methods. - Complete URL (absolute form) - Mostly used with GET when connected to a proxy. - Authority component of URL - Consists of the domain name and the port (optional). - Asterisk form - A simple asterisk ( * ) used with OPTIONS , representing the server as a whole. 3. HTTP version Defines the structure of the remaining message, acting as an indicator of the expected version to use for the response.","title":"Start-line"},{"location":"what-are-http-requests/#headers","text":"HTTP headers let the client and the server pass additional information with an HTTP request or response. A request header is a type of HTTP header that can be used in a request to provide information about the request context, so that the server can tailor the response. Headers are in key-value pairs separated by a colon. Example: key : value A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100","title":"Headers"},{"location":"what-are-http-requests/#body","text":"The body is the final part of an HTTP request. Not all requests need one, such as GET , HEAD , DELETE , or OPTIONS .","title":"Body"},{"location":"what-are-http-requests/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"what-are-http-responses/","text":"Status Line The status line is the first/starting line of an HTTP response. It contains the following information: - the protocol version. - a status code, which indicates success or failure of the request. - a status text, which provides a text description. A typical status line looks like this: HTTP/1.1 404 Not Found Headers HTTP headers let the client and the server pass additional information with an HTTP request or response. Headers are in key-value pairs separated by a colon. Example: key : value A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100 Body The body is the final part of an HTTP response. Not all responses need one. Sources MDN Web Docs","title":"What are HTTP responses?"},{"location":"what-are-http-responses/#status-line","text":"The status line is the first/starting line of an HTTP response. It contains the following information: - the protocol version. - a status code, which indicates success or failure of the request. - a status text, which provides a text description. A typical status line looks like this: HTTP/1.1 404 Not Found","title":"Status Line"},{"location":"what-are-http-responses/#headers","text":"HTTP headers let the client and the server pass additional information with an HTTP request or response. Headers are in key-value pairs separated by a colon. Example: key : value A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100","title":"Headers"},{"location":"what-are-http-responses/#body","text":"The body is the final part of an HTTP response. Not all responses need one.","title":"Body"},{"location":"what-are-http-responses/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"what-is-a-rest-api/","text":"So, what exactly is a REST API ? We know that API means \"application programming interface,\" which is a hilarious way of describing how two computers communicate with each other. It boils down to the client-server model . A client (a user or a computer) makes a request to a server (a computer built to hold and serve resources). The server, then, sends a response back to the client. In the case of REST APIs, the requests and responses are handled via HTTP, a communications protocol that standardizes the way in which requests and responses are made.","title":"What are REST APIs?"},{"location":"what-is-an-api/","text":"So, what exactly is an API? You can find out easily that API stands for \"application programming interface.\" But that doesn't tell you much. Is it an app? Is it a type of app? Is it in my phone? Is it watching me when I sleep? How come everytime I ask an engineer about it the explanation doesn't make any sense to me? These are all valid questions but the answer is surprisingly simple. An API is a set of rules for computers to communicate with each other. Yes, it really is that simple and that vague. The term API has been around for decades but the idea behind it is still basic: somewhere, out there, a computer holds information that another computer makes a request for. This is the technology that provides the backbone for apps (mobile, desktop, web) and the information exchanged between them. Think about the way you interact with technology. You can use your phone to request data, send data, update data, and, even, delete data. The technology you use for these requests has to be able to interpret your commands and share them with another computer. Today, when we use the term API, we're typically talking about a web API that makes a request for resources and expects a response in return.","title":"What are APIs?"},{"location":"what-is-an-endpoint/","text":"REST APIs focus on resources and how to access those resources. Resources are accessed through endpoints. An endpoint is the address (URL), or location , of the resource. These resources can be accessed through HTTP methods : - GET - read - POST - create - PUT - update - DELETE - delete The endpoint usually includes query parameters that specify more information about the representation of the requested resource. For example, you can specify (in a query parameter) that you want to limit the display to 5 instances of the resource (see example below). Sample endpoint: http://apiserver.com/homes?limit=5&format=json Base path : http://apiserver.com Endpoint : /homes Query string parameters : ?limit=5&format=json Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"What is an endpoint?"},{"location":"what-is-an-endpoint/#sample-endpoint","text":"http://apiserver.com/homes?limit=5&format=json Base path : http://apiserver.com Endpoint : /homes Query string parameters : ?limit=5&format=json","title":"Sample endpoint:"},{"location":"what-is-an-endpoint/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"Sources"},{"location":"what-is-http/","text":"HTTP is a protocol for fetching resources, such as HTML documents. HTTP follows a classical client-server model: a client opens a connection to make a request , then waits until a response is received from the server. HTTP is a stateless protocol, meaning that the server does not keep any data (state) between two requests. Sources","title":"What is HTTP?"},{"location":"what-is-http/#sources","text":"","title":"Sources"},{"location":"what-is-json/","text":"JSON is a lightweight data-interchange format originally created to hold structured data to be used in JavaScript. JSON is: easy for humans to read and write. easy for machines to parse and generate. based on a subset of the JavaScript programming language. language independent but uses conventions familiar to programmers. the most common format for REST API responses. pronounced jay-sAHn . REST APIs usually return information in XML or JSON format; however, JSON is used most often. Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON .org Data Base Camp","title":"What is JSON?"},{"location":"what-is-json/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON .org Data Base Camp","title":"Sources"},{"location":"what-is-nesting-in-json/","text":"Nesting involves putting arrays and objects inside each other, creating multiple layers of collections. You can put arrays inside objects, objects inside arrays, arrays inside arrays, etc. Sometimes a JSON file is one big object with lots of objects and arrays inside of that one top-level object. An array of objects: [ \"object\" , \"object\" , \"object\" ] An array of objects with values: [ { \"name\" : \"Ike\" , \"age\" : 33 }, { \"name\" : \"Cheryl\" , \"age\" : 21 }, { \"name\" : \"Joey\" , \"age\" : 55 } ] An object with an array in the value part of the key-value pair: { \"children\" :[ \"Mike\" , \"Katie\" , \"Tony\" , \"Sally\" ], \"hobbies\" :[ \"running\" , \"jumping\" , \"hiking\" , \"biking\" ] } Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum","title":"What is nesting?"},{"location":"what-is-nesting-in-json/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum","title":"Sources"},{"location":"what-is-postman/","text":"Postman is an API platform for building and using APIs, and generating API documentation. Postman is known as a GUI REST client , meaning it has a graphical user interface. We will use Postman to make a GET request for the weather using the OpenWeatherMap API . To use this API, you must create an account and create an API key : e326886bb536c5eac65ccc70df1067bb How to make a request with Postman Download and install Postman. Open Postman. Click New . Click HTTP Request . Insert the following endpoint into the empty box (\"Enter request URL\") next to GET : https://api.openweathermap.org/data/2.5/weather Click on the tab labelled Params (parameters). It is below the GET drop-down box and should be displayed by default. Add the following parameters in the respective key and value rows: key : zip / value : 28215 key : units / value : imperial key : appid / value : / e326886bb536c5eac65ccc70df1067bb Note : When you add these parameters, they appear as a query string to the endpoint URL in the GET box. The endpoint now looks like this: https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb Click Send . The response (in JSON) appears in the lower pane: { \"coord\" :{ \"lon\" : -80.7387 , \"lat\" : 35.244 }, \"weather\" :[ { \"id\" : 803 , \"main\" : \"Clouds\" , \"description\" : \"broken clouds\" , \"icon\" : \"04d\" } ], \"base\" : \"stations\" , \"main\" :{ \"temp\" : 56.53 , \"feels_like\" : 55.74 , \"temp_min\" : 54.23 , \"temp_max\" : 59.4 , \"pressure\" : 1026 , \"humidity\" : 82 }, \"visibility\" : 10000 , \"wind\" :{ \"speed\" : 8.05 , \"deg\" : 10 }, \"clouds\" :{ \"all\" : 75 }, \"dt\" : 1665408709 , \"sys\" :{ \"type\" : 2 , \"id\" : 2011045 , \"country\" : \"US\" , \"sunrise\" : 1665401084 , \"sunset\" : 1665442490 }, \"timezone\" : -14400 , \"id\" : 0 , \"name\" : \"Charlotte\" , \"cod\" : 200 } How to make the same request with curl In Postman, click on the code (****) button. Below Code Snippet , select cURL from the dropdown. Copy the code using the Copy snippet button. Paste the code into the command line. Replace the single-quotes around the hyperlink with double-quotes to avoid an error message: curl --location --request GET \"https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb\" The unminified (unformatted) response should look like this: {\"coord\":{\"lon\":-80.7387,\"lat\":35.244},\"weather\":[{\"id\":802,\"main\":\"Clouds\",\"description\":\"scattered clouds\",\"icon\":\"03d\"}],\"base\":\"stations\",\"main\":{\"temp\":64.02,\"feels_like\":63.32,\"temp_min\":60.94,\"temp_max\":66.99,\"pressure\":1027,\"humidity\":68},\"visibility\":10000,\"wind\":{\"speed\":10.36,\"deg\":70},\"clouds\":{\"all\":40},\"dt\":1665416552,\"sys\":{\"type\":2,\"id\":2011045,\"country\":\"US\",\"sunrise\":1665401084,\"sunset\":1665442490},\"timezone\":-14400,\"id\":0,\"name\":\"Charlotte\",\"cod\":200} How to save a request with Postman In Postman, click the Save button. It is above the Send button. In the Request name box, replace the endpoint with: OpenWeatherMap Current API . Click the Add Description box. Type a description: \u201cgets the current weather for 28215 in imperial units.\u201d Scroll down and click New Collection to create a new folder to save the request in. Type the name of your new collection (\u201cOpenWeatherMap\u201d) in the Name your collection box. Click Create . Click the orange Save button. The request has been saved and will now appear in the left-side pane in the Collections tab. How to create a Run in Postman button Click on the Collections tab in the left-side pane. Next to the collection name, select the more actions icon (three dots) and then click Share . Click on the Via Run in Postman tab. Click Embed a static version . Click on the Markdown friendly option. Click Copy code and embed the code below: Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Postman Learning Center","title":"What is Postman?"},{"location":"what-is-postman/#how-to-make-a-request-with-postman","text":"Download and install Postman. Open Postman. Click New . Click HTTP Request . Insert the following endpoint into the empty box (\"Enter request URL\") next to GET : https://api.openweathermap.org/data/2.5/weather Click on the tab labelled Params (parameters). It is below the GET drop-down box and should be displayed by default. Add the following parameters in the respective key and value rows: key : zip / value : 28215 key : units / value : imperial key : appid / value : / e326886bb536c5eac65ccc70df1067bb Note : When you add these parameters, they appear as a query string to the endpoint URL in the GET box. The endpoint now looks like this: https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb Click Send . The response (in JSON) appears in the lower pane: { \"coord\" :{ \"lon\" : -80.7387 , \"lat\" : 35.244 }, \"weather\" :[ { \"id\" : 803 , \"main\" : \"Clouds\" , \"description\" : \"broken clouds\" , \"icon\" : \"04d\" } ], \"base\" : \"stations\" , \"main\" :{ \"temp\" : 56.53 , \"feels_like\" : 55.74 , \"temp_min\" : 54.23 , \"temp_max\" : 59.4 , \"pressure\" : 1026 , \"humidity\" : 82 }, \"visibility\" : 10000 , \"wind\" :{ \"speed\" : 8.05 , \"deg\" : 10 }, \"clouds\" :{ \"all\" : 75 }, \"dt\" : 1665408709 , \"sys\" :{ \"type\" : 2 , \"id\" : 2011045 , \"country\" : \"US\" , \"sunrise\" : 1665401084 , \"sunset\" : 1665442490 }, \"timezone\" : -14400 , \"id\" : 0 , \"name\" : \"Charlotte\" , \"cod\" : 200 }","title":"How to make a request with Postman"},{"location":"what-is-postman/#how-to-make-the-same-request-with-curl","text":"In Postman, click on the code (****) button. Below Code Snippet , select cURL from the dropdown. Copy the code using the Copy snippet button. Paste the code into the command line. Replace the single-quotes around the hyperlink with double-quotes to avoid an error message: curl --location --request GET \"https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb\" The unminified (unformatted) response should look like this: {\"coord\":{\"lon\":-80.7387,\"lat\":35.244},\"weather\":[{\"id\":802,\"main\":\"Clouds\",\"description\":\"scattered clouds\",\"icon\":\"03d\"}],\"base\":\"stations\",\"main\":{\"temp\":64.02,\"feels_like\":63.32,\"temp_min\":60.94,\"temp_max\":66.99,\"pressure\":1027,\"humidity\":68},\"visibility\":10000,\"wind\":{\"speed\":10.36,\"deg\":70},\"clouds\":{\"all\":40},\"dt\":1665416552,\"sys\":{\"type\":2,\"id\":2011045,\"country\":\"US\",\"sunrise\":1665401084,\"sunset\":1665442490},\"timezone\":-14400,\"id\":0,\"name\":\"Charlotte\",\"cod\":200}","title":"How to make the same request with curl"},{"location":"what-is-postman/#how-to-save-a-request-with-postman","text":"In Postman, click the Save button. It is above the Send button. In the Request name box, replace the endpoint with: OpenWeatherMap Current API . Click the Add Description box. Type a description: \u201cgets the current weather for 28215 in imperial units.\u201d Scroll down and click New Collection to create a new folder to save the request in. Type the name of your new collection (\u201cOpenWeatherMap\u201d) in the Name your collection box. Click Create . Click the orange Save button. The request has been saved and will now appear in the left-side pane in the Collections tab.","title":"How to save a request with Postman"},{"location":"what-is-postman/#how-to-create-a-run-in-postman-button","text":"Click on the Collections tab in the left-side pane. Next to the collection name, select the more actions icon (three dots) and then click Share . Click on the Via Run in Postman tab. Click Embed a static version . Click on the Markdown friendly option. Click Copy code and embed the code below:","title":"How to create a Run in Postman button"},{"location":"what-is-postman/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Postman Learning Center","title":"Sources"},{"location":"what-is-rest/","text":"REST is an architectural-style that refers to more than just APIs. REST describes how a client and a server can interact using HTTP as the form of communication. Think about about what happens when you open a web browser and type in a URL (http://...). What's on the other end of that URL? A resource, that's what. That resource is a representation of something. It's not the thing itself, just a representation of that thing. Each URL identifies a resource. A client makes an HTTP request to a URL for a resource and receives a representation of that resource in the form of a response. Once the client receives the response, the request is over. REST is defined by four uniform interface constraints: Identifying named resources (data) for requests. These resources are available through URIs . The ability to modify or delete the representations of these resources. Self-descriptive messages. Clients and servers exchange messages with enough information to process each request and response. HATEOAS - Sources Fielding, Roy Thomas. Architectural Styles and the Design of Network-based Software Architectures . Doctoral dissertation, University of California, Irvine, 2000. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 .","title":"What is REST?"},{"location":"what-is-rest/#sources","text":"Fielding, Roy Thomas. Architectural Styles and the Design of Network-based Software Architectures . Doctoral dissertation, University of California, Irvine, 2000. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 .","title":"Sources"}]}