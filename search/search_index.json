{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Manish writes about it... Let's learn about APIs! As a technical writer, I noticed how many jobs these days involve the documentation of APIs. Unfortunately, trying to understand what an API is felt too complicated. There are lots of different APIs and lots of explanations. Plus, learning about APIs means you have to learn about things that are not APIs. If you're unfamiliar with programming or computer science, it can get a bit overwhelming. For me, it helped to keep track of each individual branch of knowledge, with the hope that repetition would cause all of it to make sense at some point.","title":"Home"},{"location":"#manish-writes-about-it","text":"Let's learn about APIs! As a technical writer, I noticed how many jobs these days involve the documentation of APIs. Unfortunately, trying to understand what an API is felt too complicated. There are lots of different APIs and lots of explanations. Plus, learning about APIs means you have to learn about things that are not APIs. If you're unfamiliar with programming or computer science, it can get a bit overwhelming. For me, it helped to keep track of each individual branch of knowledge, with the hope that repetition would cause all of it to make sense at some point.","title":"Manish writes about it..."},{"location":"about/","text":"About This is a website I made with Material for MkDocs, Git, GitHub, GitHub Pages, Visual Studio Code, and Markdown. This website is primarily about the study of REST APIs and REST API documentation; however, many other topics are covered, including: APIs (in general) Postman Git GitHub Static site generators Markdown JSON XML cURL and more! My study of REST APIs began with the course Documenting APIs: A guide for technical writers and engineers by fellow technical writer Tom Johnson. It then expanded to the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum. After that, things got pretty crazy.","title":"About"},{"location":"about/#about","text":"This is a website I made with Material for MkDocs, Git, GitHub, GitHub Pages, Visual Studio Code, and Markdown. This website is primarily about the study of REST APIs and REST API documentation; however, many other topics are covered, including: APIs (in general) Postman Git GitHub Static site generators Markdown JSON XML cURL and more! My study of REST APIs began with the course Documenting APIs: A guide for technical writers and engineers by fellow technical writer Tom Johnson. It then expanded to the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum. After that, things got pretty crazy.","title":"About"},{"location":"activity-use-methods-with-curl/","text":"This is an activity from the Documenting APIs online course. For this activity, we will be using curl and the Swagger Petstore . Create a new pet We will create a new pet by passing a JSON file with a curl command. Insert the following JSON code into a text file: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"doctordog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[ { \"id\" : 0 , \"name\" : \"string\" } ], \"status\" : \"available\" } Note : This information comes from the Swagger Petstore and will be passed in the -d (send data) parameter of the curl request. Change the first id value to another integer and change the name value to another name. Save the the file as mypet.json in a local directory. Open a command prompt from the directory. After your terminal or command prompt is in the same directory as your JSON file, create the new pet with the following curl request: curl -X POST --header \"Content-Type: application/json\" --header \"Accept: application/json\" -d @mypet.json \"https://petstore.swagger.io/v2/pet\" X POST : create ( POST ) a new resource. --header : include extra or custom headers. Content-Type : the type of content to submit with the request . Accept : the type of content we will accept in the response . -d @mypet.json : send data/file. The response should look like this and contain the name of the newly created pet: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"doctordog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[{ \"id\" : 0 , \"name\" : \"string\" }], \"status\" : \"available\" } Update the name of your pet We will change our pet's name with the update pet method. Open the mypet.json file and change the name value. Use the PUT (update) method instead of the POST (create) method. Update the name of the pet with the following curl request: curl -X PUT --header \"Content-Type: application/json\" --header \"Accept: application/json\" -d @mypet.json \"https://petstore.swagger.io/v2/pet\" The response should look like this and contain the updated pet name: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"misterdog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[{ \"id\" : 0 , \"name\" : \"string\" }], \"status\" : \"available\" } Get your pet's name by ID We will search for our pet by passing the id into the /pet/{petID} endpoint: Copy the first id value from the mypet.json file. Use this curl command to get information about the pet: curl -X GET --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" The response should look like this and contain the name of the pet: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"misterdog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[{ \"id\" : 0 , \"name\" : \"string\" }], \"status\" : \"available\" } Delete your pet We will delete our pet from the registry. Delete the pet from the registry with following curl request: curl -X DELETE --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" The response should look like this: { \"code\" : 200 , \"type\" : \"unknown\" , \"message\" : \"555\" } Confirm the pet has been deleted from the registry with this curl command: curl -X GET --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" The response should look like this: { \"code\" : 1 , \"type\" : \"error\" , \"message\" : \"Pet not found\" } This activity demonstrates how to perform CRUD (create, read, update, delete) operations with curl requests. How import a curl request into Postman We will confirm our pet has been deleted from the petstore registry by importing our previous curl request into Postman. Open Postman. Click Import . Click Raw text . Copy and paste the following curl request from the previous activity ( Delete your pet ). curl -X GET --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" Click Continue . The Import Entities tab will open. Click Import . The curl request has been converted to the following GET request in Postman: https://petstore.swagger.io/v2/pet/555 Click Send to complete the process. You should see the same message from Step 4 of the previous activity ( Delete your pet ). Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Swagger Petstore API","title":"Activity - Use methods with curl"},{"location":"activity-use-methods-with-curl/#create-a-new-pet","text":"We will create a new pet by passing a JSON file with a curl command. Insert the following JSON code into a text file: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"doctordog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[ { \"id\" : 0 , \"name\" : \"string\" } ], \"status\" : \"available\" } Note : This information comes from the Swagger Petstore and will be passed in the -d (send data) parameter of the curl request. Change the first id value to another integer and change the name value to another name. Save the the file as mypet.json in a local directory. Open a command prompt from the directory. After your terminal or command prompt is in the same directory as your JSON file, create the new pet with the following curl request: curl -X POST --header \"Content-Type: application/json\" --header \"Accept: application/json\" -d @mypet.json \"https://petstore.swagger.io/v2/pet\" X POST : create ( POST ) a new resource. --header : include extra or custom headers. Content-Type : the type of content to submit with the request . Accept : the type of content we will accept in the response . -d @mypet.json : send data/file. The response should look like this and contain the name of the newly created pet: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"doctordog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[{ \"id\" : 0 , \"name\" : \"string\" }], \"status\" : \"available\" }","title":"Create a new pet"},{"location":"activity-use-methods-with-curl/#update-the-name-of-your-pet","text":"We will change our pet's name with the update pet method. Open the mypet.json file and change the name value. Use the PUT (update) method instead of the POST (create) method. Update the name of the pet with the following curl request: curl -X PUT --header \"Content-Type: application/json\" --header \"Accept: application/json\" -d @mypet.json \"https://petstore.swagger.io/v2/pet\" The response should look like this and contain the updated pet name: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"misterdog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[{ \"id\" : 0 , \"name\" : \"string\" }], \"status\" : \"available\" }","title":"Update the name of your pet"},{"location":"activity-use-methods-with-curl/#get-your-pets-name-by-id","text":"We will search for our pet by passing the id into the /pet/{petID} endpoint: Copy the first id value from the mypet.json file. Use this curl command to get information about the pet: curl -X GET --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" The response should look like this and contain the name of the pet: { \"id\" : 555 , \"category\" :{ \"id\" : 0 , \"name\" : \"string\" }, \"name\" : \"misterdog\" , \"photoUrls\" :[ \"string\" ], \"tags\" :[{ \"id\" : 0 , \"name\" : \"string\" }], \"status\" : \"available\" }","title":"Get your pet's name by ID"},{"location":"activity-use-methods-with-curl/#delete-your-pet","text":"We will delete our pet from the registry. Delete the pet from the registry with following curl request: curl -X DELETE --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" The response should look like this: { \"code\" : 200 , \"type\" : \"unknown\" , \"message\" : \"555\" } Confirm the pet has been deleted from the registry with this curl command: curl -X GET --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" The response should look like this: { \"code\" : 1 , \"type\" : \"error\" , \"message\" : \"Pet not found\" } This activity demonstrates how to perform CRUD (create, read, update, delete) operations with curl requests.","title":"Delete your pet"},{"location":"activity-use-methods-with-curl/#how-import-a-curl-request-into-postman","text":"We will confirm our pet has been deleted from the petstore registry by importing our previous curl request into Postman. Open Postman. Click Import . Click Raw text . Copy and paste the following curl request from the previous activity ( Delete your pet ). curl -X GET --header \"Accept: application/json\" \"https://petstore.swagger.io/v2/pet/555\" Click Continue . The Import Entities tab will open. Click Import . The curl request has been converted to the following GET request in Postman: https://petstore.swagger.io/v2/pet/555 Click Send to complete the process. You should see the same message from Step 4 of the previous activity ( Delete your pet ).","title":"How import a curl request into Postman"},{"location":"activity-use-methods-with-curl/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Swagger Petstore API","title":"Sources"},{"location":"activity-using-json-to-describe-menu-structure/","text":"Let's say we have the following menu design: File View Open Zoom In New Zoom Out Close Original View We have two menu columns ( File and View ) that we can represent in JSON: [ { \"header\" : \"File\" , \"items\" :[ { \"id\" : \"Open\" , \"label\" : \"Open\" }, { \"id\" : \"New\" , \"label\" : \"New\" }, { \"id\" : \"Close\" , \"label\" : \"Close\" } ] }, { \"header\" : \"View\" , \"items\" :[ { \"id\" : \"ZoomIn\" , \"label\" : \"Zoom In\" }, { \"id\" : \"ZoomOut\" , \"label\" : \"Zoom Out\" }, { \"id\" : \"OriginalView\" , \"label\" : \"Original View\" } ] } ] We can also represent the data in the following table: - indentation indicates level of nesting - &nbsp; is used for spaces. Element Description Type Top level Menu columns Array of menu column objects header Name of the column String items List of menu items under the column Array of menu items id ID of the menu item String label Label that is displayed in the user interface String We can also create separate tables for each object type: Menu array: Represents a menu Element Description Type top level Menu columns Array of menu columns Menu column object: Represents a column in a menu Element Description Type header The name of the column. String items A list of menu items under the column. Array of menu items Menu item object: Represents something you can see in the menu Element Description Type id The ID of the menu item String label The label that is displayed in the user interface String The above activity is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Activity - Using JSON to describe the structure of a menu"},{"location":"api-vocabulary/","text":"API A set of definitions and protocols that allow technology products and services to communicate via the internet. REST API A web service that makes requests for resources through URL paths. SOAP API A web service that relies on a strict XML protocol to define the message exchange format for requests and responses. Web service A web-based application that provides resources in a format consumable by other computers. Web service API Sends and receives messages across the web using HTTP to transport the request and response.","title":"API vocabulary"},{"location":"api-vocabulary/#api","text":"A set of definitions and protocols that allow technology products and services to communicate via the internet.","title":"API"},{"location":"api-vocabulary/#rest-api","text":"A web service that makes requests for resources through URL paths.","title":"REST API"},{"location":"api-vocabulary/#soap-api","text":"A web service that relies on a strict XML protocol to define the message exchange format for requests and responses.","title":"SOAP API"},{"location":"api-vocabulary/#web-service","text":"A web-based application that provides resources in a format consumable by other computers.","title":"Web service"},{"location":"api-vocabulary/#web-service-api","text":"Sends and receives messages across the web using HTTP to transport the request and response.","title":"Web service API"},{"location":"documenting-json-requests/","text":"Previously, we documented JSON responses using a table. To document JSON requests, we can use the same table but with an extra column called Required . When you send a request, not all elements are required. If an element is optional, the developer needs to know. Indicates if the element is necessary for the request. The columns of the table will include: Element : the key in the key-value pair. Description : a sentence fragment, usually a descriptive noun. Type : number, string, Boolean, array (specify what it's an array of), or object (what kind of object) Required : choose either required or optional to make it easier for developers to read the table. Notes (optional): additional information (omit if not necessary). Request Example: Adding a Comment { \"comment\" :{ \"userID\" : \"mpatel\" , \"discID\" : 3989384939 , \"time\" : \"2015-02-28 10:04:32\" , \"text\" : \"Well said, Barbara!\" } } Note that time is GMT and also optional. If not included, then it uses the current time when the request is received by the server. Element Description Type Required Notes comment Top level comment data object Required userID ID of the user making the comment string Required discID ID of the discussion that is being commented on string Required time Time that the comment was posted string Optional YYYY-MM-DD HH:MM:SS Greenwich Mean Time. Default is the time the comment is received by the server. text Text of the comment string Required The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Documenting JSON requests"},{"location":"documenting-json-requests/#request-example-adding-a-comment","text":"{ \"comment\" :{ \"userID\" : \"mpatel\" , \"discID\" : 3989384939 , \"time\" : \"2015-02-28 10:04:32\" , \"text\" : \"Well said, Barbara!\" } } Note that time is GMT and also optional. If not included, then it uses the current time when the request is received by the server. Element Description Type Required Notes comment Top level comment data object Required userID ID of the user making the comment string Required discID ID of the discussion that is being commented on string Required time Time that the comment was posted string Optional YYYY-MM-DD HH:MM:SS Greenwich Mean Time. Default is the time the comment is received by the server. text Text of the comment string Required The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Request Example: Adding a Comment"},{"location":"documenting-json-with-nesting/","text":"Previously, in Documenting a single-level response in JSON, we used a table to document a single-level JSON response. To document nesting, you can either indent or create a table for each object type : Indent Each indent indicates a level of nesting. Use the tag &nbsp to create an indent/space in tables. Best for cases where objects are not reused. Takes up less space. The following JSON data is nested and represents song information: { \"song\" :{ \"title\" : \"JSON Lullaby\" , \"artist\" : \"The Instructors\" , \"musicians\" :[ \"Jen Trainer\" , \"John Teacher\" ] } } We can document this data in a table: Element Description Type song Top level song data object title Song title string artist Song artist string musicians A list of musicians that play on the song array of string Create a table for each object type Best for cases where objects are reused. Takes up more space. See: Activity: Using JSON to Describe a Menu Structure for an example. The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Documenting JSON with nesting"},{"location":"documenting-json-with-nesting/#indent","text":"Each indent indicates a level of nesting. Use the tag &nbsp to create an indent/space in tables. Best for cases where objects are not reused. Takes up less space. The following JSON data is nested and represents song information: { \"song\" :{ \"title\" : \"JSON Lullaby\" , \"artist\" : \"The Instructors\" , \"musicians\" :[ \"Jen Trainer\" , \"John Teacher\" ] } } We can document this data in a table: Element Description Type song Top level song data object title Song title string artist Song artist string musicians A list of musicians that play on the song array of string","title":"Indent"},{"location":"documenting-json-with-nesting/#create-a-table-for-each-object-type","text":"Best for cases where objects are reused. Takes up more space. See: Activity: Using JSON to Describe a Menu Structure for an example. The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Create a table for each object type"},{"location":"documenting-single-level-response-in-json/","text":"JSON with no nesting is the easiest to document because all data is one level. For this example, we have one object in curly braces {} with four key-value pairs . { \"firstName\" : \"Manish\" , \"lastName\" : \"Patel\" , \"age\" : 16 , \"fullTime\" : true } We can document this data using a table. The columns will include: Element : the key in the key-value pair. Description : a sentence fragment, usually a descriptive noun. Type : number, string, Boolean, array (specify what it's an array of), or object (what kind of object) Notes (optional): additional information (omit if not necessary). Element Description Type Notes firstName First name String lastName Last name String age Age, in years Number fullTime True, if working full-time; otherwise, false. Boolean Full-time is defined as 40 hours per week. The above method is from the course Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Documenting a single-level response in JSON"},{"location":"exercise-documenting-api-endpoints/","text":"Exercise: Documenting API endpoints for mock OpenWeatherMap assignment For this exercise, imagine that you are a technical writer working with the OpenWeatherMap team. The team has provided you with information on an internal wiki page that must be documented. We will document this new information using the methods outlined by Tom Johnson in his course Documenting APIs .","title":"Exercise - Documenting API endpoints"},{"location":"exercise-documenting-api-endpoints/#exercise-documenting-api-endpoints-for-mock-openweathermap-assignment","text":"For this exercise, imagine that you are a technical writer working with the OpenWeatherMap team. The team has provided you with information on an internal wiki page that must be documented. We will document this new information using the methods outlined by Tom Johnson in his course Documenting APIs .","title":"Exercise: Documenting API endpoints for mock OpenWeatherMap assignment"},{"location":"five-common-sections-in-rest-api-docs/","text":"1. Description of resources Resources (information) are the target of an HTTP request. 2. Endpoints and methods Endpoints : how to access the resource. HTTP methods : the allowed interactions with the resource. 3. Parameters Options for retrieving resources that can be passed along with the endpoint (such as specifying the response format or the amount returned) to influence the response. 4. Example of a request An example of a request that uses the endpoint and shows configured parameters. 5. Example of a response and schema Example of a response : an example of a response from the request example. Example of a schema : defines all possible elements in the response. Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"Five common sections in REST API documents"},{"location":"five-common-sections-in-rest-api-docs/#1-description-of-resources","text":"Resources (information) are the target of an HTTP request.","title":"1. Description of resources"},{"location":"five-common-sections-in-rest-api-docs/#2-endpoints-and-methods","text":"Endpoints : how to access the resource. HTTP methods : the allowed interactions with the resource.","title":"2. Endpoints and methods"},{"location":"five-common-sections-in-rest-api-docs/#3-parameters","text":"Options for retrieving resources that can be passed along with the endpoint (such as specifying the response format or the amount returned) to influence the response.","title":"3. Parameters"},{"location":"five-common-sections-in-rest-api-docs/#4-example-of-a-request","text":"An example of a request that uses the endpoint and shows configured parameters.","title":"4. Example of a request"},{"location":"five-common-sections-in-rest-api-docs/#5-example-of-a-response-and-schema","text":"Example of a response : an example of a response from the request example. Example of a schema : defines all possible elements in the response.","title":"5. Example of a response and schema"},{"location":"five-common-sections-in-rest-api-docs/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"Sources"},{"location":"git-vocabulary/","text":"Commit The action of submitting a change for permanent tracking by Git. Git Free and open-source software that keeps track of changes to files and directories. HEAD A reference variable that always points to the tip of the current branch in the repository. Main The default development branch. Whenever you create a git repository, a branch named \"main\" is created, and becomes the active branch. Repository A directory that has been identified by Git so that it can track changes made within the directory. SHA The hash algorithm that Git uses to generate a checksum number for each change in a document. Staging One tree in the three-tree architecture of Git that is an index of changes made to a working directory and are ready to commit. Version control The process of being able to track, view, apply, or undo changes to a document. Version control system (VCS) A tool for managing source code. With a VCS, you can share files, track changes, and manage changes from different authors. Working directory One tree in the three-tree architecture of Git containing all the changes that have not yet been tracked. Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Git Pro Atlassian Git Tutorial GitHub Glossary","title":"Git vocabulary"},{"location":"git-vocabulary/#commit","text":"The action of submitting a change for permanent tracking by Git.","title":"Commit"},{"location":"git-vocabulary/#git","text":"Free and open-source software that keeps track of changes to files and directories.","title":"Git"},{"location":"git-vocabulary/#head","text":"A reference variable that always points to the tip of the current branch in the repository.","title":"HEAD"},{"location":"git-vocabulary/#main","text":"The default development branch. Whenever you create a git repository, a branch named \"main\" is created, and becomes the active branch.","title":"Main"},{"location":"git-vocabulary/#repository","text":"A directory that has been identified by Git so that it can track changes made within the directory.","title":"Repository"},{"location":"git-vocabulary/#sha","text":"The hash algorithm that Git uses to generate a checksum number for each change in a document.","title":"SHA"},{"location":"git-vocabulary/#staging","text":"One tree in the three-tree architecture of Git that is an index of changes made to a working directory and are ready to commit.","title":"Staging"},{"location":"git-vocabulary/#version-control","text":"The process of being able to track, view, apply, or undo changes to a document.","title":"Version control"},{"location":"git-vocabulary/#version-control-system-vcs","text":"A tool for managing source code. With a VCS, you can share files, track changes, and manage changes from different authors.","title":"Version control system (VCS)"},{"location":"git-vocabulary/#working-directory","text":"One tree in the three-tree architecture of Git containing all the changes that have not yet been tracked.","title":"Working directory"},{"location":"git-vocabulary/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Git Pro Atlassian Git Tutorial GitHub Glossary","title":"Sources"},{"location":"how-to-add-files-in-git/","text":"How do I add files in Git? Let's say that you have Git installed and you've initialized the repository . Is Git tracking any new files that you create? Not until you add them. Let's say you have created a new file called newpost.txt . You can run the following command to have Git start tracking it: git add newpost.txt Info You can add multiple files at once with this command: git add . The period at the end indicates that everything in the current directory should be added. Adding a file means that you are adding the file to the staging index with the intenion of committing your changes. No, you can't commit your changes before adding. That's not how Git works. After you have added the file, you can use the following command to get a summary of which files have changes that are staged for the next commit: git status Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git","title":"How do I add files in Git?"},{"location":"how-to-add-files-in-git/#how-do-i-add-files-in-git","text":"Let's say that you have Git installed and you've initialized the repository . Is Git tracking any new files that you create? Not until you add them. Let's say you have created a new file called newpost.txt . You can run the following command to have Git start tracking it: git add newpost.txt Info You can add multiple files at once with this command: git add . The period at the end indicates that everything in the current directory should be added. Adding a file means that you are adding the file to the staging index with the intenion of committing your changes. No, you can't commit your changes before adding. That's not how Git works. After you have added the file, you can use the following command to get a summary of which files have changes that are staged for the next commit: git status","title":"How do I add files in Git?"},{"location":"how-to-add-files-in-git/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git","title":"Sources"},{"location":"how-to-commit-changes-in-git/","text":"How do I commit my changes in Git? Let's say you have added a file to the staging index called newpost.txt . To get the file into the repository, you must commit your changes and include a message. To commit the changes to our file, you can use the following command: git commit This command commits the file but does not include the required message. Without including a message, your text editor will automatically open and demand a message. You can also use this command to commit all changes in the working directory: git commit -a You can commit and add a message at the same time with this command: git commit -m \"Initial commit\" Note -m means you want to add a message. \"Initial commit\" is the message. Notice that it's wrapped in double-quotes and it's very short. In fact, \"Initial commit\" is a standard first commit message. And, yes, if you're wondering, you can add and commit changes at the same time with this command: git commit -am \"commit message This command combines the -a and -m options above. Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git Atlassian Git Tutorial","title":"How do I commit changes in Git?"},{"location":"how-to-commit-changes-in-git/#how-do-i-commit-my-changes-in-git","text":"Let's say you have added a file to the staging index called newpost.txt . To get the file into the repository, you must commit your changes and include a message. To commit the changes to our file, you can use the following command: git commit This command commits the file but does not include the required message. Without including a message, your text editor will automatically open and demand a message. You can also use this command to commit all changes in the working directory: git commit -a You can commit and add a message at the same time with this command: git commit -m \"Initial commit\" Note -m means you want to add a message. \"Initial commit\" is the message. Notice that it's wrapped in double-quotes and it's very short. In fact, \"Initial commit\" is a standard first commit message. And, yes, if you're wondering, you can add and commit changes at the same time with this command: git commit -am \"commit message This command combines the -a and -m options above.","title":"How do I commit my changes in Git?"},{"location":"how-to-commit-changes-in-git/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git Atlassian Git Tutorial","title":"Sources"},{"location":"how-to-configure-git/","text":"How do I configure Git? After you install Git, you can configure settings in three different ways/locations: System level User level Project level System level configuration You can configure system-wide settings with the following command: git config --system This will set configuration for all users and their repositories. You may need admin privileges to configure these settings. User level configuration You can configure settings for specific users with the following command: git config --global This will set configurations for specific users and their repositories. Project level configuration You can configure settings for a specific project by entering the project directory and running the following command: git config First-time configuration After you have installed Git, make sure to configure these settings. Configure user name and email address In the command line, you can set your user name and email for Git: git config --global user.name \"username\" git config --global user.email \"email@example.com\" This is important because a major part of the Git workflow is making \"commits\" and each commit needs this information. Configure your preferred text editor You can configure the default text editor you want to use with Git. For example, if you'd like to set Visual Studio Code as your default text editor, just run the following command: git config --global core.editor \"code --wait\" You can find a full list of options here . Configure color UI Since Git utilizes command-line options, you may want to configure settings to display color. This should be enabled by default. You can confirm by running the following command: git config --global color.ui If the output is True , then it's installed. If the output is False , then you can enable color by using the following command: git config --global color.ui true Naturally, you can also turn off color UI with a similar command: git config --global color.ui false List configurations You can view a full list of your configurations by using the following command: git config --list To view individual configurations in the command line, use the following command: git config --global user.name git config --global user.email Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Git Pro","title":"How do I configure Git?"},{"location":"how-to-configure-git/#how-do-i-configure-git","text":"After you install Git, you can configure settings in three different ways/locations: System level User level Project level","title":"How do I configure Git?"},{"location":"how-to-configure-git/#system-level-configuration","text":"You can configure system-wide settings with the following command: git config --system This will set configuration for all users and their repositories. You may need admin privileges to configure these settings.","title":"System level configuration"},{"location":"how-to-configure-git/#user-level-configuration","text":"You can configure settings for specific users with the following command: git config --global This will set configurations for specific users and their repositories.","title":"User level configuration"},{"location":"how-to-configure-git/#project-level-configuration","text":"You can configure settings for a specific project by entering the project directory and running the following command: git config","title":"Project level configuration"},{"location":"how-to-configure-git/#first-time-configuration","text":"After you have installed Git, make sure to configure these settings.","title":"First-time configuration"},{"location":"how-to-configure-git/#configure-user-name-and-email-address","text":"In the command line, you can set your user name and email for Git: git config --global user.name \"username\" git config --global user.email \"email@example.com\" This is important because a major part of the Git workflow is making \"commits\" and each commit needs this information.","title":"Configure user name and email address"},{"location":"how-to-configure-git/#configure-your-preferred-text-editor","text":"You can configure the default text editor you want to use with Git. For example, if you'd like to set Visual Studio Code as your default text editor, just run the following command: git config --global core.editor \"code --wait\" You can find a full list of options here .","title":"Configure your preferred text editor"},{"location":"how-to-configure-git/#configure-color-ui","text":"Since Git utilizes command-line options, you may want to configure settings to display color. This should be enabled by default. You can confirm by running the following command: git config --global color.ui If the output is True , then it's installed. If the output is False , then you can enable color by using the following command: git config --global color.ui true Naturally, you can also turn off color UI with a similar command: git config --global color.ui false","title":"Configure color UI"},{"location":"how-to-configure-git/#list-configurations","text":"You can view a full list of your configurations by using the following command: git config --list To view individual configurations in the command line, use the following command: git config --global user.name git config --global user.email","title":"List configurations"},{"location":"how-to-configure-git/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Git Pro","title":"Sources"},{"location":"how-to-initialize-git-repository/","text":"How do I initialize a Git repository? A repository is a directory identified by Git for tracking changes. In order for Git to track changes to documents, it must be initialized within the project directory. You can do that with this command: git init If you run this command in an empty folder, it will create a new, empty repository. The folder will remain empty until files are added. Note Actually, the folder will only appear to be empty. Executing git init creates a .git subdirectory with metadata and template files. If you run this command in an existing project folder, it will re-initialize Git tracking. Note git init will likely be the first command you run in a new project. Other Git commands will not work until the repository is initialized. What happens after I initialize a repository? You would assume that running the git init command will let Git know we would like it to start keeping track of any files in that folder. Unfortunately, Git will not keep track of anything unless you instruct it to. More on that later! Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git Atlassian Git Tutorial","title":"How do I initialize a Git repository?"},{"location":"how-to-initialize-git-repository/#how-do-i-initialize-a-git-repository","text":"A repository is a directory identified by Git for tracking changes. In order for Git to track changes to documents, it must be initialized within the project directory. You can do that with this command: git init If you run this command in an empty folder, it will create a new, empty repository. The folder will remain empty until files are added. Note Actually, the folder will only appear to be empty. Executing git init creates a .git subdirectory with metadata and template files. If you run this command in an existing project folder, it will re-initialize Git tracking. Note git init will likely be the first command you run in a new project. Other Git commands will not work until the repository is initialized.","title":"How do I initialize a Git repository?"},{"location":"how-to-initialize-git-repository/#what-happens-after-i-initialize-a-repository","text":"You would assume that running the git init command will let Git know we would like it to start keeping track of any files in that folder. Unfortunately, Git will not keep track of anything unless you instruct it to. More on that later!","title":"What happens after I initialize a repository?"},{"location":"how-to-initialize-git-repository/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git Atlassian Git Tutorial","title":"Sources"},{"location":"http-vocabulary/","text":"Client A computer used by a user to connect to a network and make requests to servers. CRUD The four basic operations of persistent storage, in computer programming. These operations map to the four main HTTP methods: create/ POST , read/ GET , update/ PUT , and DELETE/ DELETE . HTTP The underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them. HTTP header Allows clients and servers to pass additional information to each other with HTTP requests and HTTP responses. HTTP messages How data is exchanged between a client and a server. There are two types of HTTP messages: HTTP requests , sent by a client to a server, and HTTP responses , sent from the server to the client. HTTP methods / verbs Options given to a client for requesting or manipulating resources. Options include: GET , HEAD , POST , PUT , DELETE , CONNECT , OPTIONS , TRACE , and PATCH . HTTP request HTTP messages sent by the client to initiate an action on the server. HTTP response HTTP messages sent from a server to the client, which can include a representation of a resource, a success message, or an error message. HTTP response status codes HTTP messages sent from a server indicating whether a client's HTTP request is successful. Idempotent / idempotency An HTTP method is idempotent if an identical request can be made more than once with the same effect without changing the state of the server. A GET method is considered idempotent. A POST (create) method is not considered idempotent. Protocol A system of rules that define how data is exchanged within or between computers. Server A computer that serves many kinds of information to a user or client machine. Stateless In the client-server model, a stateless protocol means that the server does not keep any data (state) between two requests. This is in contrast to a stateful protocol, which does keep data (state) between separate requests. HTTP is a stateless protocol. Sources Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 . MDN Web Docs Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"HTTP vocabulary"},{"location":"http-vocabulary/#client","text":"A computer used by a user to connect to a network and make requests to servers.","title":"Client"},{"location":"http-vocabulary/#crud","text":"The four basic operations of persistent storage, in computer programming. These operations map to the four main HTTP methods: create/ POST , read/ GET , update/ PUT , and DELETE/ DELETE .","title":"CRUD"},{"location":"http-vocabulary/#http","text":"The underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them.","title":"HTTP"},{"location":"http-vocabulary/#http-header","text":"Allows clients and servers to pass additional information to each other with HTTP requests and HTTP responses.","title":"HTTP header"},{"location":"http-vocabulary/#http-messages","text":"How data is exchanged between a client and a server. There are two types of HTTP messages: HTTP requests , sent by a client to a server, and HTTP responses , sent from the server to the client.","title":"HTTP messages"},{"location":"http-vocabulary/#http-methods-verbs","text":"Options given to a client for requesting or manipulating resources. Options include: GET , HEAD , POST , PUT , DELETE , CONNECT , OPTIONS , TRACE , and PATCH .","title":"HTTP methods / verbs"},{"location":"http-vocabulary/#http-request","text":"HTTP messages sent by the client to initiate an action on the server.","title":"HTTP request"},{"location":"http-vocabulary/#http-response","text":"HTTP messages sent from a server to the client, which can include a representation of a resource, a success message, or an error message.","title":"HTTP response"},{"location":"http-vocabulary/#http-response-status-codes","text":"HTTP messages sent from a server indicating whether a client's HTTP request is successful.","title":"HTTP response status codes"},{"location":"http-vocabulary/#idempotent-idempotency","text":"An HTTP method is idempotent if an identical request can be made more than once with the same effect without changing the state of the server. A GET method is considered idempotent. A POST (create) method is not considered idempotent.","title":"Idempotent / idempotency"},{"location":"http-vocabulary/#protocol","text":"A system of rules that define how data is exchanged within or between computers.","title":"Protocol"},{"location":"http-vocabulary/#server","text":"A computer that serves many kinds of information to a user or client machine.","title":"Server"},{"location":"http-vocabulary/#stateless","text":"In the client-server model, a stateless protocol means that the server does not keep any data (state) between two requests. This is in contrast to a stateful protocol, which does keep data (state) between separate requests. HTTP is a stateless protocol.","title":"Stateless"},{"location":"http-vocabulary/#sources","text":"Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 . MDN Web Docs Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"Sources"},{"location":"json-vocabulary/","text":"Array An ordered sequence of values separated by commas and enclosed in brackets: [ ] . Example [ 4 , 8 , 15 , 16 , 23 , 42 ] Boolean True or false values. JavaScript A programming language. JSON is a subset of JavaScript. JSON A subset of the JavaScript programming language that is easy for humans and machines to read. JSON is a text format that holds structured data. Nesting Layers of arrays and objects. Example [ { \"header\" : \"File\" , \"items\" : [ { \"id\" : \"Open\" , \"label\" : \"Open\" }, { \"id\" : \"New\" , \"label\" : \"New\" }, { \"id\" : \"Close\" , \"label\" : \"Close\" } ]}, { \"header\" : \"View\" , \"items\" : [ { \"id\" : \"ZoomIn\" , \"label\" : \"Zoom In\" }, { \"id\" : \"ZoomOut\" , \"label\" : \"Zoom Out\" }, { \"id\" : \"OriginalView\" , \"label\" : \"Original View\" } ]} ] Null \"Nothing.\" An empty value. Object Unordered key-value pairs separated by a colon and enclosed in curly braces/brackets: {} . Example { f irs t Name : \"Manish\" , fa vori te Food : \"pizza\" , fa vori te Color : \"blue\" } String Text enclosed in double-quotation marks. Sources MDN Web Docs","title":"JSON vocabulary"},{"location":"json-vocabulary/#array","text":"An ordered sequence of values separated by commas and enclosed in brackets: [ ] . Example [ 4 , 8 , 15 , 16 , 23 , 42 ]","title":"Array"},{"location":"json-vocabulary/#boolean","text":"True or false values.","title":"Boolean"},{"location":"json-vocabulary/#javascript","text":"A programming language. JSON is a subset of JavaScript.","title":"JavaScript"},{"location":"json-vocabulary/#json","text":"A subset of the JavaScript programming language that is easy for humans and machines to read. JSON is a text format that holds structured data.","title":"JSON"},{"location":"json-vocabulary/#nesting","text":"Layers of arrays and objects. Example [ { \"header\" : \"File\" , \"items\" : [ { \"id\" : \"Open\" , \"label\" : \"Open\" }, { \"id\" : \"New\" , \"label\" : \"New\" }, { \"id\" : \"Close\" , \"label\" : \"Close\" } ]}, { \"header\" : \"View\" , \"items\" : [ { \"id\" : \"ZoomIn\" , \"label\" : \"Zoom In\" }, { \"id\" : \"ZoomOut\" , \"label\" : \"Zoom Out\" }, { \"id\" : \"OriginalView\" , \"label\" : \"Original View\" } ]} ]","title":"Nesting"},{"location":"json-vocabulary/#null","text":"\"Nothing.\" An empty value.","title":"Null"},{"location":"json-vocabulary/#object","text":"Unordered key-value pairs separated by a colon and enclosed in curly braces/brackets: {} . Example { f irs t Name : \"Manish\" , fa vori te Food : \"pizza\" , fa vori te Color : \"blue\" }","title":"Object"},{"location":"json-vocabulary/#string","text":"Text enclosed in double-quotation marks.","title":"String"},{"location":"json-vocabulary/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"mock-surf-report-api-documentation/","text":"Mock surf report API documentation Surfreport Provides data about surfing conditions, including surf height, wind, tide, and water temperature, as well as an overall recommendation for going surfing. Endpoints GET surfreport/ {beachId} Gets the surf conditions for a specific beach ID. Parameters Path parameters Path parameter Description {beachId} The value for a specific beach. Valid beachId values can be found at: https://example.com/surfreport/beaches_available. Query string parameters Query string parameter Required / Optional Description Type days Optional The number of days to include in the response. The default is 3. The maximum is 7. Integer units Optional Valid values are imperial or metric. The default is imperial. Integer time Optional If you include the time, then only conditions for the specified hour will be included in the response. Integer. Unix format (ms since 1970) in GMT or UTC. Sample request curl -I -X GET \"https://api.openweathermap.org/data/2.5/surfreport? & appid=APIKEY & zip=95050 & units=metric & days=2\" (In the above curl request, replace APIKEY with your unique API key.) Sample response The following is a sample response from the surfreport/{beachId} endpoint: { \"surfreport\" : [ { \"beach\" : \"Santa Cruz\" , \"monday\" : { \"1pm\" : { \"tide\" : 5 , \"wind\" : 15 , \"watertemp\" : 80 , \"surfheight\" : 5 , \"recommendation\" : \"Go surfing!\" }, \"2pm\" : { \"tide\" : -1 , \"wind\" : 1 , \"watertemp\" : 50 , \"surfheight\" : 3 , \"recommendation\" : \"Surfing conditions are okay, not great.\" }, \"3pm\" : { \"tide\" : -1 , \"wind\" : 10 , \"watertemp\" : 65 , \"surfheight\" : 1 , \"recommendation\" : \"Not a good day for surfing.\" } ... } } ] } Response definitions The following table describes each item in the response. Response item Description Data type beach The selected beach based on the beach ID provided in the request. String {day} The selected day of the week. A minimum of 3 days gets returned in the response. A maximum of 7 days can be returned in the response. Object {time} The time of the day for surf conditions. Only included if specified as a parameter in the request. String {day}/{time}/ tide The level of tide at the beach for a specific day and time. Can be a positive or negative number, or 0. Integer {day}/{time}/ wind The wind speed at the beach, measured in knots (nautical miles per hour). High wind speeds result in undesireable surf conditions. Integer {day}/{time}/ watertemp The temperature of the water, returned in either degrees Fahrenheit or Celsius, depending on specified units. Integer {day}/{time}/ surfheight The height of the waves, returned in either feet or centimeters, depending on specified units. High surf height results in undesireable surf conditions. Integer {day}/{time}/ recommendation An overall recommendation for surfing. The recommendation is based on an algorithm for optimal surf conditions and includes one of three responses: (1) \"Go surfing!, (2) \"Surfing conditions are okay, not great\", and (3) \"Not a good day for surfing.\" String Source Documenting APIs: A guide for technical writers and engineers by Tom Johnson","title":"Mock surf report API documentation"},{"location":"mock-surf-report-api-documentation/#mock-surf-report-api-documentation","text":"","title":"Mock surf report API documentation"},{"location":"mock-surf-report-api-documentation/#surfreport","text":"Provides data about surfing conditions, including surf height, wind, tide, and water temperature, as well as an overall recommendation for going surfing.","title":"Surfreport"},{"location":"mock-surf-report-api-documentation/#endpoints","text":"GET surfreport/ {beachId} Gets the surf conditions for a specific beach ID.","title":"Endpoints"},{"location":"mock-surf-report-api-documentation/#parameters","text":"","title":"Parameters"},{"location":"mock-surf-report-api-documentation/#path-parameters","text":"Path parameter Description {beachId} The value for a specific beach. Valid beachId values can be found at: https://example.com/surfreport/beaches_available.","title":"Path parameters"},{"location":"mock-surf-report-api-documentation/#query-string-parameters","text":"Query string parameter Required / Optional Description Type days Optional The number of days to include in the response. The default is 3. The maximum is 7. Integer units Optional Valid values are imperial or metric. The default is imperial. Integer time Optional If you include the time, then only conditions for the specified hour will be included in the response. Integer. Unix format (ms since 1970) in GMT or UTC.","title":"Query string parameters"},{"location":"mock-surf-report-api-documentation/#sample-request","text":"curl -I -X GET \"https://api.openweathermap.org/data/2.5/surfreport? & appid=APIKEY & zip=95050 & units=metric & days=2\" (In the above curl request, replace APIKEY with your unique API key.)","title":"Sample request"},{"location":"mock-surf-report-api-documentation/#sample-response","text":"The following is a sample response from the surfreport/{beachId} endpoint: { \"surfreport\" : [ { \"beach\" : \"Santa Cruz\" , \"monday\" : { \"1pm\" : { \"tide\" : 5 , \"wind\" : 15 , \"watertemp\" : 80 , \"surfheight\" : 5 , \"recommendation\" : \"Go surfing!\" }, \"2pm\" : { \"tide\" : -1 , \"wind\" : 1 , \"watertemp\" : 50 , \"surfheight\" : 3 , \"recommendation\" : \"Surfing conditions are okay, not great.\" }, \"3pm\" : { \"tide\" : -1 , \"wind\" : 10 , \"watertemp\" : 65 , \"surfheight\" : 1 , \"recommendation\" : \"Not a good day for surfing.\" } ... } } ] }","title":"Sample response"},{"location":"mock-surf-report-api-documentation/#response-definitions","text":"The following table describes each item in the response. Response item Description Data type beach The selected beach based on the beach ID provided in the request. String {day} The selected day of the week. A minimum of 3 days gets returned in the response. A maximum of 7 days can be returned in the response. Object {time} The time of the day for surf conditions. Only included if specified as a parameter in the request. String {day}/{time}/ tide The level of tide at the beach for a specific day and time. Can be a positive or negative number, or 0. Integer {day}/{time}/ wind The wind speed at the beach, measured in knots (nautical miles per hour). High wind speeds result in undesireable surf conditions. Integer {day}/{time}/ watertemp The temperature of the water, returned in either degrees Fahrenheit or Celsius, depending on specified units. Integer {day}/{time}/ surfheight The height of the waves, returned in either feet or centimeters, depending on specified units. High surf height results in undesireable surf conditions. Integer {day}/{time}/ recommendation An overall recommendation for surfing. The recommendation is based on an algorithm for optimal surf conditions and includes one of three responses: (1) \"Go surfing!, (2) \"Surfing conditions are okay, not great\", and (3) \"Not a good day for surfing.\" String","title":"Response definitions"},{"location":"mock-surf-report-api-documentation/#source","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson","title":"Source"},{"location":"mock-surf-report-wiki/","text":"The new endpoint is /surfreport/{beachId} . This endpoint is for surfers who want to check things like tide and wave conditions to determine whether they should head out to the beach to surf. {beachId} is retrieved from a list of beaches on our site. Optional parameters: Number of days: Max is 7. Default is 3. Optional. Units: imperial or metric. With imperial, you get feet and knots. With metric, you get centimeters and kilometers per hour. Optional. Time: time of the day corresponding to time zone of the beach you're inquiring about. Format is unix time, aka epoch. Unix time is the milliseconds since 1970. Time zone is GMT or UTC. Optional. If you include the hour, then you only get back the surf condition for the hour you specified. Otherwise, you get back 3 days, with conditions listed out by hour for each day. The response will include the surf height, the wind, temp, the tide, and overall recommendation. Sample endpoint with parameters: https://api.openweathermap.org/com/surfreport/123?&days=2&units=metrics&hour=1400 The response contains these elements: surfreport: surfheight (units: feet) wind (units: kts) tide (units: feet) water temperature (units: F degrees) recommendation - string (\"Go surfing!\", \"Surfing conditions okay, not great\", \"Not today -- try some other activity.\") The recommendation is based on an algorithm that takes optimal surfing conditions, scores them in a rubric, and includes one of three responses. Sample format: { \"surfreport\" : [ { \"beach\" : \"Santa Cruz\" , \"monday\" : { \"1pm\" : { \"tide\" : 5 , \"wind\" : 15 , \"watertemp\" : 60 , \"surfheight\" : 5 , \"recommendation\" : \"Go surfing!\" }, \"2pm\" : { \"tide\" : -1 , \"wind\" : 1 , \"watertemp\" : 50 , \"surfheight\" : 3 , \"recommendation\" : \"Surfing conditions are okay, not great\" } ... } } ] } Negative numbers in the tide represent incoming tide. The report won't include any details about riptide conditions. Although users can enter beach names, there are only certain beaches included in the report. Users can look to see which beaches are available from our website at https://example.com/surfreport/beaches_available (not a real URL). The beach names must be url encoded when passed in the endpoint as query strings. To switch from feet to metrics, users can add a query string of &units=metrics . Default is &units=imperial . Here's an example of how developers might integrate this information. This site shows the height of the surf coupled with a cam. If the query is malformed, you get error code 400 and an indication of the error. References Documenting APIs: A guide for technical writers and engineers by Tom Johnson","title":"Mock surf report wiki"},{"location":"mock-surf-report-wiki/#references","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson","title":"References"},{"location":"rest-api-vocabulary/","text":"API A set of definitions and protocols that allow technology products and services to communicate via the internet. Application state Information about the client\u2019s path through an API . Client A computer used by a user to connect to a network and make requests to servers. Endpoint The endpoint of an API is a digital location where an API receives requests about a specific resource on its server. In APIs, an endpoint is typically a uniform resource locator ( URL ) that provides the location of a resource on the server. HATEOAS One of the constraints of REST laid out by Roy Fielding. A server offers a client a \"menu\" of hypermedia options that a client can choose from. HTTP The underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them. HTTP methods / verbs Options given to a client for requesting or manipulating resources. Options include: GET , HEAD , POST , PUT , DELETE , CONNECT , OPTIONS , TRACE , and PATCH . Idempotent / idempotency An HTTP method is idempotent if an identical request can be made more than once with the same effect without changing the state of the server. A GET method is considered idempotent . A POST (create) method is not considered idempotent . Representation A piece of data that describes the state of a resource. Resource In general, a resource is whatever might be identified by a URI (documents, files, images, data, etc.) REST Representational State Transfer REST API A web service that makes requests for resources through URL paths. Server A computer that serves many kinds of information to a user or client machine. State Remembered information in a computer system. Stateless In the client-server model, a stateless protocol means that the server does not keep any data (state) between two requests. This is in contrast to a stateful protocol, which does keep data (state) between separate requests. URL A type of URI that identifies a resource and provides a means of locating the resource. URI Provides a simple and extensible means for identifying a resource. The identifier consists of a string of characters matching syntax rules. A URL is a type of URI . Sources Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 . MDN Web Docs Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"REST API vocabulary"},{"location":"rest-api-vocabulary/#api","text":"A set of definitions and protocols that allow technology products and services to communicate via the internet.","title":"API"},{"location":"rest-api-vocabulary/#application-state","text":"Information about the client\u2019s path through an API .","title":"Application state"},{"location":"rest-api-vocabulary/#client","text":"A computer used by a user to connect to a network and make requests to servers.","title":"Client"},{"location":"rest-api-vocabulary/#endpoint","text":"The endpoint of an API is a digital location where an API receives requests about a specific resource on its server. In APIs, an endpoint is typically a uniform resource locator ( URL ) that provides the location of a resource on the server.","title":"Endpoint"},{"location":"rest-api-vocabulary/#hateoas","text":"One of the constraints of REST laid out by Roy Fielding. A server offers a client a \"menu\" of hypermedia options that a client can choose from.","title":"HATEOAS"},{"location":"rest-api-vocabulary/#http","text":"The underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them.","title":"HTTP"},{"location":"rest-api-vocabulary/#http-methods-verbs","text":"Options given to a client for requesting or manipulating resources. Options include: GET , HEAD , POST , PUT , DELETE , CONNECT , OPTIONS , TRACE , and PATCH .","title":"HTTP methods / verbs"},{"location":"rest-api-vocabulary/#idempotent-idempotency","text":"An HTTP method is idempotent if an identical request can be made more than once with the same effect without changing the state of the server. A GET method is considered idempotent . A POST (create) method is not considered idempotent .","title":"Idempotent / idempotency"},{"location":"rest-api-vocabulary/#representation","text":"A piece of data that describes the state of a resource.","title":"Representation"},{"location":"rest-api-vocabulary/#resource","text":"In general, a resource is whatever might be identified by a URI (documents, files, images, data, etc.)","title":"Resource"},{"location":"rest-api-vocabulary/#rest","text":"Representational State Transfer","title":"REST"},{"location":"rest-api-vocabulary/#rest-api","text":"A web service that makes requests for resources through URL paths.","title":"REST API"},{"location":"rest-api-vocabulary/#server","text":"A computer that serves many kinds of information to a user or client machine.","title":"Server"},{"location":"rest-api-vocabulary/#state","text":"Remembered information in a computer system.","title":"State"},{"location":"rest-api-vocabulary/#stateless","text":"In the client-server model, a stateless protocol means that the server does not keep any data (state) between two requests. This is in contrast to a stateful protocol, which does keep data (state) between separate requests.","title":"Stateless"},{"location":"rest-api-vocabulary/#url","text":"A type of URI that identifies a resource and provides a means of locating the resource.","title":"URL"},{"location":"rest-api-vocabulary/#uri","text":"Provides a simple and extensible means for identifying a resource. The identifier consists of a string of characters matching syntax rules. A URL is a type of URI .","title":"URI"},{"location":"rest-api-vocabulary/#sources","text":"Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 . MDN Web Docs Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"Sources"},{"location":"the-syntax-of-uris/","text":"The syntax of URIs A URI is a string that refers to a resource. The most common URIs are URLs , which identify the resource by giving its location on the Web. A URL is composed of different parts; some are mandatory and others are optional. Scheme or protocol Example http://example.com http:// is the protocol . It indicates which protocol (HTTP or HTTPS) the browser must use. Authority Example http://example.com www.example.com is the domain name, or authority , that governs the namespace. It indicates which Web server is being requested. Port Example http://www.example.com:80/path :80 is the port . It indicates the technical \"gate\" used to access the resources on the web server. It is usually omitted if the web server uses the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) to grant access to its resources. Path Example http://www.example.com:80/path/to/myfile.html?key1=value1 /path/to/myfile.html is the path to the resource on the Web server. Previously, a path like this represented a physical file location on a web server. Now, it is mostly an abstraction handled by web servers without any physical reality. Query Example http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2 key1=value1&key2=value2 are extra parameters provided to the web server. The parameters are a list of key/value pairs separated with the & symbol. Parameters define the search criteria used by the server to find a set of matching resources. The ? before the key/value pairs indicates the start of the query string . Fragment Example http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument #SomewhereInTheDocument is an anchor to another part of the resource itself. An anchor is similar to a \"bookmark\" inside the resource, giving the browser the directions to show the content located at that \"bookmarked\" spot. Sources MDN Web Docs Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"Introduction to RESTful Web services\" - IBM Developer","title":"The syntax of URIs"},{"location":"the-syntax-of-uris/#the-syntax-of-uris","text":"A URI is a string that refers to a resource. The most common URIs are URLs , which identify the resource by giving its location on the Web. A URL is composed of different parts; some are mandatory and others are optional.","title":"The syntax of URIs"},{"location":"the-syntax-of-uris/#scheme-or-protocol","text":"Example http://example.com http:// is the protocol . It indicates which protocol (HTTP or HTTPS) the browser must use.","title":"Scheme or protocol"},{"location":"the-syntax-of-uris/#authority","text":"Example http://example.com www.example.com is the domain name, or authority , that governs the namespace. It indicates which Web server is being requested.","title":"Authority"},{"location":"the-syntax-of-uris/#port","text":"Example http://www.example.com:80/path :80 is the port . It indicates the technical \"gate\" used to access the resources on the web server. It is usually omitted if the web server uses the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) to grant access to its resources.","title":"Port"},{"location":"the-syntax-of-uris/#path","text":"Example http://www.example.com:80/path/to/myfile.html?key1=value1 /path/to/myfile.html is the path to the resource on the Web server. Previously, a path like this represented a physical file location on a web server. Now, it is mostly an abstraction handled by web servers without any physical reality.","title":"Path"},{"location":"the-syntax-of-uris/#query","text":"Example http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2 key1=value1&key2=value2 are extra parameters provided to the web server. The parameters are a list of key/value pairs separated with the & symbol. Parameters define the search criteria used by the server to find a set of matching resources. The ? before the key/value pairs indicates the start of the query string .","title":"Query"},{"location":"the-syntax-of-uris/#fragment","text":"Example http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument #SomewhereInTheDocument is an anchor to another part of the resource itself. An anchor is similar to a \"bookmark\" inside the resource, giving the browser the directions to show the content located at that \"bookmarked\" spot.","title":"Fragment"},{"location":"the-syntax-of-uris/#sources","text":"MDN Web Docs Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"Introduction to RESTful Web services\" - IBM Developer","title":"Sources"},{"location":"using-xml-to-document-request-to-record-TV-program/","text":"Using XML to document a request to record a TV program (part 1) Let's say we have an API that sends requests to record a TV program with XML : <recordTV> <date> 2015-06-01 </date> <time format= \"24\" > 18:00 </time> <duration> 1.5 </duration> <channel> 54 </channel> </recordTV> We can document this data in a table: Represents a request to record a television program. Element Description Type Required Notes recordTV Top level TV program data Required date Date of the program string Optional Format is YYYY-MM-DD HH:MM:SS. Default value is today's date. time Time the program begins number Required Attributes: format has values 24 or 12 for 24 or 12 hour formats. Format is HH:MM, with am or pm afterwards for 12 hour format Using XML to document a request to record a TV program (part 2) Let's say we have a different request to record a TV program. This time the XML has attributes: <recordTV> <when date= \"2015-06-01\" time= \"18:00\" format= \"24\" /> <duration hours= \"1.5\" /> <station channel= \"54\" /> </recordTV> We can also document this data in a table: Represents a request to record a television program. Element Attribute Description Type Required Notes recordTV Top level TV program data Required when Date and time when the program starts Required date Date string Optional Format is YYYY-MM-DD. Default value is today's date. time Time the program begins string Required Format is HH:MM, with am or pm afterwards for 12 hour format format Format for the time: either 12 hour or 24 hour string Required Valid values: 24 or 12 duration hours Length of the program number Required In hours station channel Channel to record number Required Sources Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum","title":"Using XML to document a request to record a TV program"},{"location":"using-xml-to-document-request-to-record-TV-program/#using-xml-to-document-a-request-to-record-a-tv-program-part-1","text":"Let's say we have an API that sends requests to record a TV program with XML : <recordTV> <date> 2015-06-01 </date> <time format= \"24\" > 18:00 </time> <duration> 1.5 </duration> <channel> 54 </channel> </recordTV> We can document this data in a table: Represents a request to record a television program. Element Description Type Required Notes recordTV Top level TV program data Required date Date of the program string Optional Format is YYYY-MM-DD HH:MM:SS. Default value is today's date. time Time the program begins number Required Attributes: format has values 24 or 12 for 24 or 12 hour formats. Format is HH:MM, with am or pm afterwards for 12 hour format","title":"Using XML to document a request to record a TV program (part 1)"},{"location":"using-xml-to-document-request-to-record-TV-program/#using-xml-to-document-a-request-to-record-a-tv-program-part-2","text":"Let's say we have a different request to record a TV program. This time the XML has attributes: <recordTV> <when date= \"2015-06-01\" time= \"18:00\" format= \"24\" /> <duration hours= \"1.5\" /> <station channel= \"54\" /> </recordTV> We can also document this data in a table: Represents a request to record a television program. Element Attribute Description Type Required Notes recordTV Top level TV program data Required when Date and time when the program starts Required date Date string Optional Format is YYYY-MM-DD. Default value is today's date. time Time the program begins string Required Format is HH:MM, with am or pm afterwards for 12 hour format format Format for the time: either 12 hour or 24 hour string Required Valid values: 24 or 12 duration hours Length of the program number Required In hours station channel Channel to record number Required","title":"Using XML to document a request to record a TV program (part 2)"},{"location":"using-xml-to-document-request-to-record-TV-program/#sources","text":"Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum","title":"Sources"},{"location":"using-xml-to-document-weather-forecast/","text":"Using XML to document a weather forecast We can use XML to hold structured data about a weather forecast: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <forecast> <dailyForecast> <date> 2015-06-01 </date> <description> sunny </description> <maxTemp unit= \"C\" > 22 </maxTemp> <minTemp unit= \"C\" > 20 </minTemp> <windSpeed unit= \"kph\" > 12 </windSpeed> <danger> false </danger> </dailyForecast> <dailyForecast> <date> 2014-06-02 </date> <description> windy </description> <maxTemp unit= \"C\" > 22 </maxTemp> <minTemp unit= \"C\" > 20 </minTemp> <windSpeed unit= \"kph\" > 40 </windSpeed> <danger> true </danger> </dailyForecast> <dailyForecast /> </forecast> In the above example, we have a three-day forecast. Each day is represented by the <dailyForecast> tag. The third day is represented by an empty element: <dailyForecast /> The XML here is nested, with <forecast> as the top-level and the <dailyForecast> tags as the second-level. The content of each tag captures weather forecast data, including the date ( <date> ), description ( <description> ), temperature ( <maxTemp> and <minTemp> ), wind speed ( <windSpeed> ), and alerts ( <danger> ). Source Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Using XML to document a weather forecast"},{"location":"using-xml-to-document-weather-forecast/#using-xml-to-document-a-weather-forecast","text":"We can use XML to hold structured data about a weather forecast: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <forecast> <dailyForecast> <date> 2015-06-01 </date> <description> sunny </description> <maxTemp unit= \"C\" > 22 </maxTemp> <minTemp unit= \"C\" > 20 </minTemp> <windSpeed unit= \"kph\" > 12 </windSpeed> <danger> false </danger> </dailyForecast> <dailyForecast> <date> 2014-06-02 </date> <description> windy </description> <maxTemp unit= \"C\" > 22 </maxTemp> <minTemp unit= \"C\" > 20 </minTemp> <windSpeed unit= \"kph\" > 40 </windSpeed> <danger> true </danger> </dailyForecast> <dailyForecast /> </forecast> In the above example, we have a three-day forecast. Each day is represented by the <dailyForecast> tag. The third day is represented by an empty element: <dailyForecast /> The XML here is nested, with <forecast> as the top-level and the <dailyForecast> tags as the second-level. The content of each tag captures weather forecast data, including the date ( <date> ), description ( <description> ), temperature ( <maxTemp> and <minTemp> ), wind speed ( <windSpeed> ), and alerts ( <danger> ).","title":"Using XML to document a weather forecast"},{"location":"using-xml-to-document-weather-forecast/#source","text":"Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum.","title":"Source"},{"location":"what-are-arrays-and-objects-in-json/","text":"What are arrays and objects in JSON? JSON has two types of basic structures: arrays and objects . What is an array? An array is an ordered sequence of zero or more values enclosed in brackets [] and separated by commas. An array of numbers: [ 4 , 6 , 23.1 , -4 , 0 , 56 ] An array of strings: [ \"red\" , \"green\" , \"blue\" ] Mixed array with a Boolean value and a null value: [ 65 , \"toast\" , true , 21 , null , 100 ] What is an object? An object is an unordered collection of zero or more name/value pairs enclosed in curly braces {} and separated by commas. About objects Objects are JSON's dictionaries , meaning they consist of keys and values , where you can look up a value with a given key. Keys and values are separated from each other with a colon. Key-value pairs are separated with commas. Keys and values can be any data type, although strings are the most common. An object in curly brackets that holds values for \u201cred\u201d, \u201cgreen\u201d, and \u201cblue\u201d. { \"red\" : 205 , \"green\" : 123 , \"blue\" : 53 } The first key is the string \"red\" , which has a value of 205 . Keys and values are separated by a colon. Key-value pairs are separated with commas. Data about a person: { \"firstName\" : \"Manish\" , \"lastName\" : \"Patel\" , \"employed\" : false } \"firstName\" = key; \"Manish\" = value (string) \"lastName\" = key; \"Patel\" = value (string) \"employed\" = key; false = value (Boolean) Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"What are arrays and objects?"},{"location":"what-are-arrays-and-objects-in-json/#what-are-arrays-and-objects-in-json","text":"JSON has two types of basic structures: arrays and objects .","title":"What are arrays and objects in JSON?"},{"location":"what-are-arrays-and-objects-in-json/#what-is-an-array","text":"An array is an ordered sequence of zero or more values enclosed in brackets [] and separated by commas. An array of numbers: [ 4 , 6 , 23.1 , -4 , 0 , 56 ] An array of strings: [ \"red\" , \"green\" , \"blue\" ] Mixed array with a Boolean value and a null value: [ 65 , \"toast\" , true , 21 , null , 100 ]","title":"What is an array?"},{"location":"what-are-arrays-and-objects-in-json/#what-is-an-object","text":"An object is an unordered collection of zero or more name/value pairs enclosed in curly braces {} and separated by commas.","title":"What is an object?"},{"location":"what-are-arrays-and-objects-in-json/#about-objects","text":"Objects are JSON's dictionaries , meaning they consist of keys and values , where you can look up a value with a given key. Keys and values are separated from each other with a colon. Key-value pairs are separated with commas. Keys and values can be any data type, although strings are the most common. An object in curly brackets that holds values for \u201cred\u201d, \u201cgreen\u201d, and \u201cblue\u201d. { \"red\" : 205 , \"green\" : 123 , \"blue\" : 53 } The first key is the string \"red\" , which has a value of 205 . Keys and values are separated by a colon. Key-value pairs are separated with commas. Data about a person: { \"firstName\" : \"Manish\" , \"lastName\" : \"Patel\" , \"employed\" : false } \"firstName\" = key; \"Manish\" = value (string) \"lastName\" = key; \"Patel\" = value (string) \"employed\" = key; false = value (Boolean)","title":"About objects"},{"location":"what-are-arrays-and-objects-in-json/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"Sources"},{"location":"what-are-attributes-in-xml/","text":"What are attributes in XML ? Tags in XML hold content. The tags can also have attributes as a way of holding simple data. Attributes contain data related to specific elements in key-value pairs. Attributes appear in the start tag: Example <tag key= \"value\" > content </tag> In the above example: <tag is the start tag. key is the attribute. value is the value of the attribute. content is the content between the start and end tags. /tag> is the end tag. Example <fileSize unit= \"kB\" > 34.6 </fileSize> In the above example, the attribute is named unit and its value is kB . Using attributes to describe song data Let's say we have the following XML code to describe song data: <song> <title> XML Waltz </title> <artist> The Extensible Extenders </artist> <musicians> <musician> Sally Flute </musician> <musician> Derek Windpipe </musician> </musicians> </song> In the example above, the first tag is for <song> and contains multiple tags nested beneath it. We can restructure this data using attributes: <song title= \"XML Waltz\" artist= \"The Extensible Extenders\" > <musicians> <musician name= \"Sally Flute\" /> <musician name= \"Derek Windpipe\" /> </musicians> </song> Sources MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"What are attributes in XML?"},{"location":"what-are-attributes-in-xml/#what-are-attributes-in-xml","text":"Tags in XML hold content. The tags can also have attributes as a way of holding simple data. Attributes contain data related to specific elements in key-value pairs. Attributes appear in the start tag: Example <tag key= \"value\" > content </tag> In the above example: <tag is the start tag. key is the attribute. value is the value of the attribute. content is the content between the start and end tags. /tag> is the end tag. Example <fileSize unit= \"kB\" > 34.6 </fileSize> In the above example, the attribute is named unit and its value is kB .","title":"What are attributes in XML?"},{"location":"what-are-attributes-in-xml/#using-attributes-to-describe-song-data","text":"Let's say we have the following XML code to describe song data: <song> <title> XML Waltz </title> <artist> The Extensible Extenders </artist> <musicians> <musician> Sally Flute </musician> <musician> Derek Windpipe </musician> </musicians> </song> In the example above, the first tag is for <song> and contains multiple tags nested beneath it. We can restructure this data using attributes: <song title= \"XML Waltz\" artist= \"The Extensible Extenders\" > <musicians> <musician name= \"Sally Flute\" /> <musician name= \"Derek Windpipe\" /> </musicians> </song>","title":"Using attributes to describe song data"},{"location":"what-are-attributes-in-xml/#sources","text":"MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"Sources"},{"location":"what-are-basic-json-data-types/","text":"What are the basic data types in JSON? The basic data types in JSON are referred to as values . Strings Text enclosed in double-quotation marks. Example \"example\" Numbers Integer (whole) or decimal Positive or negative Zero No quotation marks Example [ 1 , 2.5 , 0 , 382 ] Booleans True or false No quotation marks Example [ true , false , false , true ] Null Means \"nothing\" No quotation marks Example [ null ] Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"What are the basic JSON data types?"},{"location":"what-are-basic-json-data-types/#what-are-the-basic-data-types-in-json","text":"The basic data types in JSON are referred to as values .","title":"What are the basic data types in JSON?"},{"location":"what-are-basic-json-data-types/#strings","text":"Text enclosed in double-quotation marks. Example \"example\"","title":"Strings"},{"location":"what-are-basic-json-data-types/#numbers","text":"Integer (whole) or decimal Positive or negative Zero No quotation marks Example [ 1 , 2.5 , 0 , 382 ]","title":"Numbers"},{"location":"what-are-basic-json-data-types/#booleans","text":"True or false No quotation marks Example [ true , false , false , true ]","title":"Booleans"},{"location":"what-are-basic-json-data-types/#null","text":"Means \"nothing\" No quotation marks Example [ null ]","title":"Null"},{"location":"what-are-basic-json-data-types/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON.org Data Base Camp","title":"Sources"},{"location":"what-are-curl-command-options/","text":"curl has over 200 command options. The most basic command in curl is: curl http://example.com where the command ( curl ) is followed by the URL. This is a summary of the commands most relevant to API documentation: i, --include Include the HTTP response headers in the output. The verbose option is also available. curl -i https://example.com -I, --head Only include the HTTP response headers in the output. curl -I https://example.com -H, --header <header/@file> Include extra or custom headers. curl -H \"X-First-Name: Joe\" https://example.com curl -H \"User-Agent: yes-please/2000\" https://example.com curl -H \"Host:\" https://example.com -v, --verbose Useful for debugging and getting additional information about what has been sent/received. curl --verbose https://example.com -d, --data <data> Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. curl -d \"name=curl\" https://example.com curl -d \"name=curl\" -d \"tool=cmdline\" https://example.com curl -d @filename https://example.com -G, --get Retrieve a resource from a server. curl --get https://example.com -k, --insecure By default, every secure connection curl makes is verified to be secure before the transfer takes place. This option makes curl skip the verification step and proceed without checking. curl --insecure https://example.com -L, --location Submits a new request if the URL is a redirect. curl -L https://example.com -X, --request <method> Specifies a custom request method to use when communicating with the HTTP server. The specified request method will be used instead of the method otherwise used (which defaults to GET ). curl -X \"DELETE\" https://example.com Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson curl.se \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"curl command options"},{"location":"what-are-curl-command-options/#i-include","text":"Include the HTTP response headers in the output. The verbose option is also available. curl -i https://example.com","title":"i, --include"},{"location":"what-are-curl-command-options/#-i-head","text":"Only include the HTTP response headers in the output. curl -I https://example.com","title":"-I, --head"},{"location":"what-are-curl-command-options/#-h-header-headerfile","text":"Include extra or custom headers. curl -H \"X-First-Name: Joe\" https://example.com curl -H \"User-Agent: yes-please/2000\" https://example.com curl -H \"Host:\" https://example.com","title":"-H, --header &lt;header/@file&gt;"},{"location":"what-are-curl-command-options/#-v-verbose","text":"Useful for debugging and getting additional information about what has been sent/received. curl --verbose https://example.com","title":"-v, --verbose"},{"location":"what-are-curl-command-options/#-d-data-data","text":"Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. curl -d \"name=curl\" https://example.com curl -d \"name=curl\" -d \"tool=cmdline\" https://example.com curl -d @filename https://example.com","title":"-d, --data &lt;data&gt;"},{"location":"what-are-curl-command-options/#-g-get","text":"Retrieve a resource from a server. curl --get https://example.com","title":"-G, --get"},{"location":"what-are-curl-command-options/#-k-insecure","text":"By default, every secure connection curl makes is verified to be secure before the transfer takes place. This option makes curl skip the verification step and proceed without checking. curl --insecure https://example.com","title":"-k, --insecure"},{"location":"what-are-curl-command-options/#-l-location","text":"Submits a new request if the URL is a redirect. curl -L https://example.com","title":"-L, --location"},{"location":"what-are-curl-command-options/#-x-request-method","text":"Specifies a custom request method to use when communicating with the HTTP server. The specified request method will be used instead of the method otherwise used (which defaults to GET ). curl -X \"DELETE\" https://example.com","title":"-X, --request &lt;method&gt;"},{"location":"what-are-curl-command-options/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson curl.se \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"Sources"},{"location":"what-are-essential-git-commands/","text":"git init Initializes a Git repository. git config Lists configured settings. git help Lists Git help topics. git add Adds a file to the staging index. git commit Commits a file to the repository. git status Shows the status of the working directory. git log Shows a log, or history, of commits. git clone Creates a copy (or clone ) of a repository in your working directory. git diff Shows unstaged changes between your index and working directory. Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git Atlassian Git Tutorial","title":"What are the essential Git commands?"},{"location":"what-are-essential-git-commands/#git-init","text":"Initializes a Git repository.","title":"git init"},{"location":"what-are-essential-git-commands/#git-config","text":"Lists configured settings.","title":"git config"},{"location":"what-are-essential-git-commands/#git-help","text":"Lists Git help topics.","title":"git help"},{"location":"what-are-essential-git-commands/#git-add","text":"Adds a file to the staging index.","title":"git add"},{"location":"what-are-essential-git-commands/#git-commit","text":"Commits a file to the repository.","title":"git commit"},{"location":"what-are-essential-git-commands/#git-status","text":"Shows the status of the working directory.","title":"git status"},{"location":"what-are-essential-git-commands/#git-log","text":"Shows a log, or history, of commits.","title":"git log"},{"location":"what-are-essential-git-commands/#git-clone","text":"Creates a copy (or clone ) of a repository in your working directory.","title":"git clone"},{"location":"what-are-essential-git-commands/#git-diff","text":"Shows unstaged changes between your index and working directory.","title":"git diff"},{"location":"what-are-essential-git-commands/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git Atlassian Git Tutorial","title":"Sources"},{"location":"what-are-http-messages/","text":"What are HTTP messages? HTTP messages are how data is exchanged between a server and a client. There are two types of HTTP messages: HTTP requests , sent by the client to trigger an action on the server. HTTP responses , the answer from the server. Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The messages are human-readable. Structure of requests and responses Source: MDN Web Docs HTTP requests and responses share a similar structure and include: a start-line that describes the request being made, or its success status. Always a single line. optional HTTP headers for specifying the request or describing the body included in the message. Header fields are key-value pairs separated by colons. a blank line indicating all meta-information for the request has been sent. an optional body that contains data associated with the request or the document associated with the response. HTTP Request Source: MDN Web Docs HTTP Method Defines the operation the client wants to perform. Options include: GET POST PUT DELETE Path The path of the requested resource. Version Version of HTTP protocol Headers Optional headers to convey additional information for the servers Body A POST method would contain the resource being sent to the server. HTTP Response Source: MDN Web Docs Version Version of HTTP protocol Status code Indicates whether a specific HTTP request has been successfully completed. Status message A non-authoritative short description of the status code. Headers HTTP headers, like those for requests. Header fields are key-value pairs separated by colons. Body Optional. Contains the fetched resource. Sources MDN Web Docs","title":"What are HTTP messages?"},{"location":"what-are-http-messages/#what-are-http-messages","text":"HTTP messages are how data is exchanged between a server and a client. There are two types of HTTP messages: HTTP requests , sent by the client to trigger an action on the server. HTTP responses , the answer from the server. Clients and servers communicate by exchanging individual messages (as opposed to a stream of data). The messages are human-readable.","title":"What are HTTP messages?"},{"location":"what-are-http-messages/#structure-of-requests-and-responses","text":"Source: MDN Web Docs HTTP requests and responses share a similar structure and include: a start-line that describes the request being made, or its success status. Always a single line. optional HTTP headers for specifying the request or describing the body included in the message. Header fields are key-value pairs separated by colons. a blank line indicating all meta-information for the request has been sent. an optional body that contains data associated with the request or the document associated with the response.","title":"Structure of requests and responses"},{"location":"what-are-http-messages/#http-request","text":"Source: MDN Web Docs HTTP Method Defines the operation the client wants to perform. Options include: GET POST PUT DELETE Path The path of the requested resource. Version Version of HTTP protocol Headers Optional headers to convey additional information for the servers Body A POST method would contain the resource being sent to the server.","title":"HTTP Request"},{"location":"what-are-http-messages/#http-response","text":"Source: MDN Web Docs Version Version of HTTP protocol Status code Indicates whether a specific HTTP request has been successfully completed. Status message A non-authoritative short description of the status code. Headers HTTP headers, like those for requests. Header fields are key-value pairs separated by colons. Body Optional. Contains the fetched resource.","title":"HTTP Response"},{"location":"what-are-http-messages/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"what-are-http-methods/","text":"What are HTTP methods? HTTP is a request-response protocol between a client and a server. HTTP methods indicate what action should be performed for requesting a specific resource. These methods are also called HTTP verbs . The resource is the noun . CRUD refers to the ways that stored data can be operated. It also refers to the four basic functions of persistent storage and maps to the four major HTTP methods (see below). HTTP request methods can be considered: Safe , if they do not alter the state of the server (read-only operation). Idempotent , if an identical request can be made (once or more) without changing the original result (i.e., no side effects). Cacheable , if they can be cached (stored for retrieval), saving a new request to the server. HTTP Methods GET Read / request data from a resource. Safe / idempotent / cacheable POST Create a resource. Not safe / Not idempotent / Not cacheable PUT Update a resource. Not safe / Idempotent / Not cacheable DELETE Remove a resource. Not safe / Idempotent / Not cacheable HEAD Read / request data (same as GET ) from a resource but without a response body. Safe / idempotent / cacheable PATCH Apply partial modifications to a resource. Not safe / Not idempotent / Not cacheable OPTIONS Describe the communication options for a resource. Safe / Idempotent / Not cacheable CONNECT Establish a tunnel to the server identified by a resource. Not safe / Not idempotent / Not cacheable TRACE Perform a message loop-back test along the path to a resource. Safe / Idempotent / Not cacheable Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"What are HTTP methods?"},{"location":"what-are-http-methods/#what-are-http-methods","text":"HTTP is a request-response protocol between a client and a server. HTTP methods indicate what action should be performed for requesting a specific resource. These methods are also called HTTP verbs . The resource is the noun . CRUD refers to the ways that stored data can be operated. It also refers to the four basic functions of persistent storage and maps to the four major HTTP methods (see below). HTTP request methods can be considered: Safe , if they do not alter the state of the server (read-only operation). Idempotent , if an identical request can be made (once or more) without changing the original result (i.e., no side effects). Cacheable , if they can be cached (stored for retrieval), saving a new request to the server.","title":"What are HTTP methods?"},{"location":"what-are-http-methods/#http-methods","text":"","title":"HTTP Methods"},{"location":"what-are-http-methods/#get","text":"Read / request data from a resource. Safe / idempotent / cacheable","title":"GET"},{"location":"what-are-http-methods/#post","text":"Create a resource. Not safe / Not idempotent / Not cacheable","title":"POST"},{"location":"what-are-http-methods/#put","text":"Update a resource. Not safe / Idempotent / Not cacheable","title":"PUT"},{"location":"what-are-http-methods/#delete","text":"Remove a resource. Not safe / Idempotent / Not cacheable","title":"DELETE"},{"location":"what-are-http-methods/#head","text":"Read / request data (same as GET ) from a resource but without a response body. Safe / idempotent / cacheable","title":"HEAD"},{"location":"what-are-http-methods/#patch","text":"Apply partial modifications to a resource. Not safe / Not idempotent / Not cacheable","title":"PATCH"},{"location":"what-are-http-methods/#options","text":"Describe the communication options for a resource. Safe / Idempotent / Not cacheable","title":"OPTIONS"},{"location":"what-are-http-methods/#connect","text":"Establish a tunnel to the server identified by a resource. Not safe / Not idempotent / Not cacheable","title":"CONNECT"},{"location":"what-are-http-methods/#trace","text":"Perform a message loop-back test along the path to a resource. Safe / Idempotent / Not cacheable","title":"TRACE"},{"location":"what-are-http-methods/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson The IETF HTTP Working Group MDN Web Docs","title":"Sources"},{"location":"what-are-http-requests/","text":"What are HTTP requests? HTTP requests are messages sent by the client to initiate an action on the server. Start-line The start-line of HTTP requests contains three elements: 1. HTTP method HTTP verbs indicate the action to be performed. These actions include: GET : fetch a resource POST : push data to the server to create a new resource DELETE : delete a resource from the server PUT : update a resource on the server 2. Request target Target is usually a URL. Options include: Absolute path followed by a ? and query string. This is the most common form and is used with HTTP methods. Complete URL (absolute form) Mostly used with GET when connected to a proxy. Authority component of URL Consists of the domain name and the port (optional). Asterisk form A simple asterisk ( * ) used with OPTIONS , representing the server as a whole. 3. HTTP version Defines the structure of the remaining message, acting as an indicator of the expected version to use for the response. Headers Source: MDN Web Docs HTTP headers let the client and the server pass additional information with an HTTP request or response. A request header is a type of HTTP header that can be used in a request to provide information about the request context, so that the server can tailor the response. Headers are in key-value pairs separated by a colon. A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100 Body The body is the final part of an HTTP request. Not all requests need one, such as GET , HEAD , DELETE , or OPTIONS . Sources MDN Web Docs","title":"What are HTTP requests?"},{"location":"what-are-http-requests/#what-are-http-requests","text":"HTTP requests are messages sent by the client to initiate an action on the server.","title":"What are HTTP requests?"},{"location":"what-are-http-requests/#start-line","text":"The start-line of HTTP requests contains three elements: 1. HTTP method HTTP verbs indicate the action to be performed. These actions include: GET : fetch a resource POST : push data to the server to create a new resource DELETE : delete a resource from the server PUT : update a resource on the server 2. Request target Target is usually a URL. Options include: Absolute path followed by a ? and query string. This is the most common form and is used with HTTP methods. Complete URL (absolute form) Mostly used with GET when connected to a proxy. Authority component of URL Consists of the domain name and the port (optional). Asterisk form A simple asterisk ( * ) used with OPTIONS , representing the server as a whole. 3. HTTP version Defines the structure of the remaining message, acting as an indicator of the expected version to use for the response.","title":"Start-line"},{"location":"what-are-http-requests/#headers","text":"Source: MDN Web Docs HTTP headers let the client and the server pass additional information with an HTTP request or response. A request header is a type of HTTP header that can be used in a request to provide information about the request context, so that the server can tailor the response. Headers are in key-value pairs separated by a colon. A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100","title":"Headers"},{"location":"what-are-http-requests/#body","text":"The body is the final part of an HTTP request. Not all requests need one, such as GET , HEAD , DELETE , or OPTIONS .","title":"Body"},{"location":"what-are-http-requests/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"what-are-http-responses/","text":"What are HTTP responses? HTTP responses are messages from a server to the client, which can include a representation of a resource, a success message, or an error message. Status Line The status line is the first/starting line of an HTTP response. It contains the following information: the protocol version. a status code, which indicates success or failure of the request. a status text, which provides a text description. A typical status line looks like this: HTTP/1.1 404 Not Found Headers Source: MDN Web Docs HTTP headers let the client and the server pass additional information with an HTTP request or response. Headers are in key-value pairs separated by a colon. A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100 Body The body is the final part of an HTTP response. Not all responses need one. Sources MDN Web Docs","title":"What are HTTP responses?"},{"location":"what-are-http-responses/#what-are-http-responses","text":"HTTP responses are messages from a server to the client, which can include a representation of a resource, a success message, or an error message.","title":"What are HTTP responses?"},{"location":"what-are-http-responses/#status-line","text":"The status line is the first/starting line of an HTTP response. It contains the following information: the protocol version. a status code, which indicates success or failure of the request. a status text, which provides a text description. A typical status line looks like this: HTTP/1.1 404 Not Found","title":"Status Line"},{"location":"what-are-http-responses/#headers","text":"Source: MDN Web Docs HTTP headers let the client and the server pass additional information with an HTTP request or response. Headers are in key-value pairs separated by a colon. A representation header is a type of HTTP header that describes the particular representation of the resource sent in an HTTP message body. Example: Content-Length : 100","title":"Headers"},{"location":"what-are-http-responses/#body","text":"The body is the final part of an HTTP response. Not all responses need one.","title":"Body"},{"location":"what-are-http-responses/#sources","text":"MDN Web Docs","title":"Sources"},{"location":"what-are-namespaces-in-xml/","text":"What are namespaces in XML ? Each tag in an XML file should have a unique name. However, you might have a tag name that means one thing in one context, but a different thing in a different context. For this, you have namespaces to uniquely identify the tags. Example <education:onlineCourse> In the above example: education is the namespace. onlineCourse is the tag. The namespace acts as a \"prefix\" to the tag. They are separated by a colon. Sources MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"What are namespaces in XML?"},{"location":"what-are-namespaces-in-xml/#what-are-namespaces-in-xml","text":"Each tag in an XML file should have a unique name. However, you might have a tag name that means one thing in one context, but a different thing in a different context. For this, you have namespaces to uniquely identify the tags. Example <education:onlineCourse> In the above example: education is the namespace. onlineCourse is the tag. The namespace acts as a \"prefix\" to the tag. They are separated by a colon.","title":"What are namespaces in XML?"},{"location":"what-are-namespaces-in-xml/#sources","text":"MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"Sources"},{"location":"what-are-tags-and-elements-in-xml/","text":"What are tags and elements in XML ? XML holds structured data. That data is enclosed in tags . A tag starts with < and ends with /> . XML has three types of tags: Start tags , such as <start> End tags , such as </start> Empty-element tags , such as <line-break /> Start tags and end tags must match. For every starting tag, there must be an end tag for it. Empty-element tags are an exception. Tag names must start with letters, and can only contain letters, numbers, and underscores. Example <city> New York </city> <age> 23 </age> <enabled> false </enabled> Content is what's stored in between tags. Content can be nested , with tags inside of tags. Example <color> <red> 205 </red> <green> 123 </green> <blue> 52 </blue> </color> What is an element? Elements refer to tags and the content within tags. An empty-element tag is also considered an element. Note This is different from JSON , where an element is an object. Sources MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"What are tags and elements in XML?"},{"location":"what-are-tags-and-elements-in-xml/#what-are-tags-and-elements-in-xml","text":"XML holds structured data. That data is enclosed in tags . A tag starts with < and ends with /> . XML has three types of tags: Start tags , such as <start> End tags , such as </start> Empty-element tags , such as <line-break /> Start tags and end tags must match. For every starting tag, there must be an end tag for it. Empty-element tags are an exception. Tag names must start with letters, and can only contain letters, numbers, and underscores. Example <city> New York </city> <age> 23 </age> <enabled> false </enabled> Content is what's stored in between tags. Content can be nested , with tags inside of tags. Example <color> <red> 205 </red> <green> 123 </green> <blue> 52 </blue> </color>","title":"What are tags and elements in XML?"},{"location":"what-are-tags-and-elements-in-xml/#what-is-an-element","text":"Elements refer to tags and the content within tags. An empty-element tag is also considered an element. Note This is different from JSON , where an element is an object.","title":"What is an element?"},{"location":"what-are-tags-and-elements-in-xml/#sources","text":"MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"Sources"},{"location":"what-is-a-github-repository/","text":"What is a GitHub repository? Info A repository contains all of your project's files and each file's revision history. You can discuss and manage your project's work within the repository. GitHub Docs A repository can be owned by an individual or shared across an organization. Access to a repository can be limited or made available to the public. This depends on the nature of the project. How do I create a new repository? The easiest way to create a new repository is to go through this URL: https://github.com/new/ Info You can also click on the + button at the top of the page or click on the green Create a new repository button. This takes you directly to the Create a new repository page. You have the option to use a Repository template . If you use a template, your new repository will include the contents of the template. Choose an Owner of the repository. This is populated by default. Create a short Repository Name . Include a short description of your repository (optional). Decide if you want your repository to be Public or Private . Add a README.md file (optional). In the README file, you can include a longer description for your repository. This is useful if you make your repository public. Add a .gitignore file (optional). Click the green Create repository button. Success Sources GitHub Docs GitHub Glossary","title":"What is a GitHub repository?"},{"location":"what-is-a-github-repository/#what-is-a-github-repository","text":"Info A repository contains all of your project's files and each file's revision history. You can discuss and manage your project's work within the repository. GitHub Docs A repository can be owned by an individual or shared across an organization. Access to a repository can be limited or made available to the public. This depends on the nature of the project.","title":"What is a GitHub repository?"},{"location":"what-is-a-github-repository/#how-do-i-create-a-new-repository","text":"The easiest way to create a new repository is to go through this URL: https://github.com/new/ Info You can also click on the + button at the top of the page or click on the green Create a new repository button. This takes you directly to the Create a new repository page. You have the option to use a Repository template . If you use a template, your new repository will include the contents of the template. Choose an Owner of the repository. This is populated by default. Create a short Repository Name . Include a short description of your repository (optional). Decide if you want your repository to be Public or Private . Add a README.md file (optional). In the README file, you can include a longer description for your repository. This is useful if you make your repository public. Add a .gitignore file (optional). Click the green Create repository button. Success","title":"How do I create a new repository?"},{"location":"what-is-a-github-repository/#sources","text":"GitHub Docs GitHub Glossary","title":"Sources"},{"location":"what-is-a-rest-api/","text":"So, what exactly is a REST API ? We know that API means \"application programming interface,\" which is a hilarious way of describing how two computers communicate with each other. It all boils down to the client-server model . A client (a user or a computer) makes a request for a resource to a server (a computer built to hold and serve resources). The server, then, sends a response back to the client. In the case of REST APIs, the requests and responses are handled via HTTP, a communications protocol that standardizes the way in which requests and responses are made.","title":"What are REST APIs?"},{"location":"what-is-an-api/","text":"So, what exactly is an API? You can find out easily that API stands for \"application programming interface.\" But that doesn't tell you much. Is it an app? Is it a type of app? Is it in my phone? Is it watching me when I sleep? How come everytime I ask an engineer about it the explanation doesn't make any sense? These are all valid questions but the answer is surprisingly simple: An API is a set of rules for computers to communicate with each other. Yes, it really is that simple and that vague. The term API has been around for decades but the idea behind it is still basic: somewhere, out there, a computer holds information that another computer makes a request for. This is the technology that provides the backbone for apps (mobile, desktop, web) and the information exchanged between them. Think about the way you interact with technology. You can use your phone to request data, send data, update data, and, even, delete data. The technology you use for these requests has to be able to interpret your commands and share them with another computer. Then, that computer has to process your request and send a response. It all happens so quickly and so often that you take it for granted. Today, when we use the term API, we're typically talking about a web API that makes a request for resources and expects a response in return.","title":"What are APIs?"},{"location":"what-is-an-endpoint/","text":"What is an endpoint? REST APIs focus on resources and how to access those resources. Resources are accessed through endpoints. An endpoint is the address ( URL ), or location , of the resource. These resources can be accessed through HTTP methods : GET - read POST - create PUT - update DELETE - delete The endpoint can include query parameters that specify more information about the representation of the requested resource. For example, you can specify (in a query parameter) that you want to limit the display to 5 instances of the resource (see example below). Sample endpoint: Example http://apiserver.com/homes?limit=5 & format=json Base path : http://apiserver.com Endpoint : /homes Query string parameters : ?limit=5&format=json Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"What is an endpoint?"},{"location":"what-is-an-endpoint/#what-is-an-endpoint","text":"REST APIs focus on resources and how to access those resources. Resources are accessed through endpoints. An endpoint is the address ( URL ), or location , of the resource. These resources can be accessed through HTTP methods : GET - read POST - create PUT - update DELETE - delete The endpoint can include query parameters that specify more information about the representation of the requested resource. For example, you can specify (in a query parameter) that you want to limit the display to 5 instances of the resource (see example below).","title":"What is an endpoint?"},{"location":"what-is-an-endpoint/#sample-endpoint","text":"Example http://apiserver.com/homes?limit=5 & format=json Base path : http://apiserver.com Endpoint : /homes Query string parameters : ?limit=5&format=json","title":"Sample endpoint:"},{"location":"what-is-an-endpoint/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"Sources"},{"location":"what-is-cloning-in-git/","text":"What is cloning in Git? A clone is a copy of a remote repository that exists on your computer instead of on a website server. Cloning is the act of making the copy. After you initialize Git in your local project folder, you can use this basic command to clone an existing repository from GitHub: git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY Info You can find the URL by navigating to the GitHub repository online and clicking on the green Code button. You can clone with the HTTPS or SSH options. This command creates a copy on your computer of the latest version of the respoitory and its full history. Cloning creates a new branch for you to make your own changes/edits without having to be online. When your changes are ready, you will have to merge the changes from your local branch to the main repository. Sources GitHub Docs GitHub Glossary","title":"What is cloning in Git?"},{"location":"what-is-cloning-in-git/#what-is-cloning-in-git","text":"A clone is a copy of a remote repository that exists on your computer instead of on a website server. Cloning is the act of making the copy. After you initialize Git in your local project folder, you can use this basic command to clone an existing repository from GitHub: git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY Info You can find the URL by navigating to the GitHub repository online and clicking on the green Code button. You can clone with the HTTPS or SSH options. This command creates a copy on your computer of the latest version of the respoitory and its full history. Cloning creates a new branch for you to make your own changes/edits without having to be online. When your changes are ready, you will have to merge the changes from your local branch to the main repository.","title":"What is cloning in Git?"},{"location":"what-is-cloning-in-git/#sources","text":"GitHub Docs GitHub Glossary","title":"Sources"},{"location":"what-is-curl/","text":"curl , or cURL , is a command line tool used to transfer data to and from a server. It can execute HTTP requests with different parameters and methods. curl lets you talk to a server by specifying the location (in the form of a URL) and the data you want to send. curl and REST API documentation REST APIs can use almost any programming language to call an endpoint. Documenting each programming language would be too time-consuming, so curl can be used to demonstrate the call. If you make a curl request for a website, curl will retrieve and display the website's code. For example, the following command: curl https://example.com returns the following response: <!doctype html> < html > < head > < title > Example Domain </ title > < meta charset = \"utf-8\" /> < meta http-equiv = \"Content-type\" content = \"text/html; charset=utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < style type = \"text/css\" > body { background-color : #f0f0f2 ; margin : 0 ; padding : 0 ; font-family : - apple-system , system-ui , BlinkMacSystemFont , \"Segoe UI\" , \"Open Sans\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } div { width : 600 px ; margin : 5 em auto ; padding : 2 em ; background-color : #fdfdff ; border-radius : 0.5 em ; box-shadow : 2 px 3 px 7 px 2 px rgba ( 0 , 0 , 0 , 0.02 ); } a : link , a : visited { color : #38488f ; text-decoration : none ; } @ media ( max-width : 700px ) { div { margin : 0 auto ; width : auto ; } } </ style > </ head > < body > < div > < h1 > Example Domain </ h1 > < p > This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission. </ p > < p >< a href = \"https://www.iana.org/domains/example\" > More information... </ a ></ p > </ div > </ body > </ html > If you were to request the same website on a browser, then the browser would display the code in a way that\u2019s visually readable. curl, however, shows you what you're actually retrieving (code). curl and Windows Always use double-quotes instead of single-quotes Don\u2019t use backslashes ( \\ ) to separate lines Add -k to the curl command to bypass curl\u2019s security certificate (if necessary) How to confirm if you have curl installed Run the following command from the command line: curl --version The response should look like this: curl 7.83.1 (Windows) libcurl/7.83.1 Schannel Release-Date: 2022-05-13 Protocols: dict file ftp ftps http https imap imaps pop3 pop3s smtp smtps telnet tftp Features: AsynchDNS HSTS IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI UnixSockets Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson curl.se \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"What is curl?"},{"location":"what-is-curl/#curl-and-rest-api-documentation","text":"REST APIs can use almost any programming language to call an endpoint. Documenting each programming language would be too time-consuming, so curl can be used to demonstrate the call. If you make a curl request for a website, curl will retrieve and display the website's code. For example, the following command: curl https://example.com returns the following response: <!doctype html> < html > < head > < title > Example Domain </ title > < meta charset = \"utf-8\" /> < meta http-equiv = \"Content-type\" content = \"text/html; charset=utf-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < style type = \"text/css\" > body { background-color : #f0f0f2 ; margin : 0 ; padding : 0 ; font-family : - apple-system , system-ui , BlinkMacSystemFont , \"Segoe UI\" , \"Open Sans\" , \"Helvetica Neue\" , Helvetica , Arial , sans-serif ; } div { width : 600 px ; margin : 5 em auto ; padding : 2 em ; background-color : #fdfdff ; border-radius : 0.5 em ; box-shadow : 2 px 3 px 7 px 2 px rgba ( 0 , 0 , 0 , 0.02 ); } a : link , a : visited { color : #38488f ; text-decoration : none ; } @ media ( max-width : 700px ) { div { margin : 0 auto ; width : auto ; } } </ style > </ head > < body > < div > < h1 > Example Domain </ h1 > < p > This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission. </ p > < p >< a href = \"https://www.iana.org/domains/example\" > More information... </ a ></ p > </ div > </ body > </ html > If you were to request the same website on a browser, then the browser would display the code in a way that\u2019s visually readable. curl, however, shows you what you're actually retrieving (code).","title":"curl and REST API documentation"},{"location":"what-is-curl/#curl-and-windows","text":"Always use double-quotes instead of single-quotes Don\u2019t use backslashes ( \\ ) to separate lines Add -k to the curl command to bypass curl\u2019s security certificate (if necessary)","title":"curl and Windows"},{"location":"what-is-curl/#how-to-confirm-if-you-have-curl-installed","text":"Run the following command from the command line: curl --version The response should look like this: curl 7.83.1 (Windows) libcurl/7.83.1 Schannel Release-Date: 2022-05-13 Protocols: dict file ftp ftps http https imap imaps pop3 pop3s smtp smtps telnet tftp Features: AsynchDNS HSTS IPv6 Kerberos Largefile NTLM SPNEGO SSL SSPI UnixSockets","title":"How to confirm if you have curl installed"},{"location":"what-is-curl/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson curl.se \"What is cURL and how does it relate to APIs?\" from IBM Developer","title":"Sources"},{"location":"what-is-git-architecture/","text":"What is a two-tree architecture? Other version control systems use a two-tree architecture . The two trees refer to the repository and the working directory : flowchart LR A[repository] B[working directory] You \"check out\" files from the repository and edit them within your working directory: stateDiagram-v2 s1 : repository s2 : working directory s1 --> s2: checkout s2 --> s1: commit After those changes are made, you commit the changes back to the repository. What is a three-tree architecture? Git uses a three-tree architecture. It has: A repository that's tracked by Git. A working directory that contains changes that may not be tracked by Git yet. A staging index in between the repository and working directory that contains changes we plan to commit to the repository. flowchart LR A[repository] B[staging index] C[working directory] In Git, you have a copy of the repository in your working directory where you can edit files. When you're ready for Git to start tracking your changes, you add files to the staging index. Then, you commit your changes to the repository along with a message. Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git","title":"What is the architecture of Git?"},{"location":"what-is-git-architecture/#what-is-a-two-tree-architecture","text":"Other version control systems use a two-tree architecture . The two trees refer to the repository and the working directory : flowchart LR A[repository] B[working directory] You \"check out\" files from the repository and edit them within your working directory: stateDiagram-v2 s1 : repository s2 : working directory s1 --> s2: checkout s2 --> s1: commit After those changes are made, you commit the changes back to the repository.","title":"What is a two-tree architecture?"},{"location":"what-is-git-architecture/#what-is-a-three-tree-architecture","text":"Git uses a three-tree architecture. It has: A repository that's tracked by Git. A working directory that contains changes that may not be tracked by Git yet. A staging index in between the repository and working directory that contains changes we plan to commit to the repository. flowchart LR A[repository] B[staging index] C[working directory] In Git, you have a copy of the repository in your working directory where you can edit files. When you're ready for Git to start tracking your changes, you add files to the staging index. Then, you commit your changes to the repository along with a message.","title":"What is a three-tree architecture?"},{"location":"what-is-git-architecture/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git","title":"Sources"},{"location":"what-is-git/","text":"What is Git? Git is a distributed version control tool that does not require a single master repository for all users. It is open-source software that keeps track of changes, especially text changes, to files and directories. With Git, you can compare old and new versions of files. Its competitors include: Subversion CVS Perforce ClearCase Mercurial Info Git was created in 2005 by Linus Torvalds, the creator of Linux. What is distributed version control? In a central code repository model, source code is stored in one central location. Code is then checked out from this master repository. Git uses distributed version control . Different users maintain their own local repositories instead of checking it out from the master repository. This means THERE IS NO CENTRAL REPOSITORY. Changes are stored as change sets , or patches. Git tracks the changes to documents, not the versions of documents. These change sets can be exchanged between repositories. There are many working copies, each with their own combination of change sets. This ensures that there is no single point of failure in case a server goes down. If you've never used Git, or a distributed version control system, before, then the in's and out's can seem unfamiliar. Git utilizes the command line instead of a standard GUI; however, graphical user interface options are available. How do I know if Git is already installed on my computer? Open up the command line on your terminal and run the following command: git --version Do you see a response this like this? git version 2.37.3.windows.1 If not, then you will have to install Git. Are Git and GitHub the same thing? Nope! More on that later ... Sources Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git","title":"What is Git?"},{"location":"what-is-git/#what-is-git","text":"Git is a distributed version control tool that does not require a single master repository for all users. It is open-source software that keeps track of changes, especially text changes, to files and directories. With Git, you can compare old and new versions of files. Its competitors include: Subversion CVS Perforce ClearCase Mercurial Info Git was created in 2005 by Linus Torvalds, the creator of Linux.","title":"What is Git?"},{"location":"what-is-git/#what-is-distributed-version-control","text":"In a central code repository model, source code is stored in one central location. Code is then checked out from this master repository. Git uses distributed version control . Different users maintain their own local repositories instead of checking it out from the master repository. This means THERE IS NO CENTRAL REPOSITORY. Changes are stored as change sets , or patches. Git tracks the changes to documents, not the versions of documents. These change sets can be exchanged between repositories. There are many working copies, each with their own combination of change sets. This ensures that there is no single point of failure in case a server goes down. If you've never used Git, or a distributed version control system, before, then the in's and out's can seem unfamiliar. Git utilizes the command line instead of a standard GUI; however, graphical user interface options are available.","title":"What is distributed version control?"},{"location":"what-is-git/#how-do-i-know-if-git-is-already-installed-on-my-computer","text":"Open up the command line on your terminal and run the following command: git --version Do you see a response this like this? git version 2.37.3.windows.1 If not, then you will have to install Git.","title":"How do I know if Git is already installed on my computer?"},{"location":"what-is-git/#are-git-and-github-the-same-thing","text":"Nope! More on that later ...","title":"Are Git and GitHub the same thing?"},{"location":"what-is-git/#sources","text":"Skoglund, K. (2019). Git Essential Training: The Basics [Video]. LinkedIn Learning. https://www.linkedin.com/learning/git-essential-training-the-basics Pro Git","title":"Sources"},{"location":"what-is-github/","text":"What is GitHub? Previously, we learned that Git is an open source version control tool that tracks changes to files. So, what is GitHub? Are they the same thing? No. GitHub is a platform for hosting and collaborating on code. Git is the core technology that GitHub is built on top of. Info To best use GitHub, you'll need to set up Git. Git is responsible for everything GitHub-related that happens locally on your computer. To effectively collaborate on GitHub, you'll write in issues and pull requests using GitHub Flavored Markdown. GitHub Docs GitHub offers three types of accounts: Personal accounts Organization accounts Enterprise accounts At the very least, you will need to create a free personal account to create a repository or collaborate with others on a project. You can interact with GitHub via its website or GitHub Desktop . What is a repository? A repository is the most basic element of GitHub. A repository is like the \"folder\" of a project: it contains all of the files of a project, its documentation, and its revision history. Repositories can be public or private, and can host multiple collaborators. Sources GitHub Docs GitHub Glossary","title":"What is GitHub?"},{"location":"what-is-github/#what-is-github","text":"Previously, we learned that Git is an open source version control tool that tracks changes to files. So, what is GitHub? Are they the same thing? No. GitHub is a platform for hosting and collaborating on code. Git is the core technology that GitHub is built on top of. Info To best use GitHub, you'll need to set up Git. Git is responsible for everything GitHub-related that happens locally on your computer. To effectively collaborate on GitHub, you'll write in issues and pull requests using GitHub Flavored Markdown. GitHub Docs GitHub offers three types of accounts: Personal accounts Organization accounts Enterprise accounts At the very least, you will need to create a free personal account to create a repository or collaborate with others on a project. You can interact with GitHub via its website or GitHub Desktop .","title":"What is GitHub?"},{"location":"what-is-github/#what-is-a-repository","text":"A repository is the most basic element of GitHub. A repository is like the \"folder\" of a project: it contains all of the files of a project, its documentation, and its revision history. Repositories can be public or private, and can host multiple collaborators.","title":"What is a repository?"},{"location":"what-is-github/#sources","text":"GitHub Docs GitHub Glossary","title":"Sources"},{"location":"what-is-http/","text":"HTTP is a protocol for fetching resources, such as HTML documents. HTTP follows a classical client-server model: a client opens a connection to make a request , then waits until a response is received from the server. HTTP is a stateless protocol, meaning that the server does not keep any data (state) between two requests. Sources MDN Web Docs Documenting APIs: A guide for technical writers and engineers by Tom Johnson Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"What is HTTP?"},{"location":"what-is-http/#sources","text":"MDN Web Docs Documenting APIs: A guide for technical writers and engineers by Tom Johnson Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"Sources"},{"location":"what-is-json/","text":"What is JSON ? JSON is a lightweight data-interchange format originally created to hold structured data to be used in JavaScript. JSON is: easy for humans to read and write. easy for machines to parse and generate. based on a subset of the JavaScript programming language. language independent but uses conventions familiar to programmers. the most common format for REST API responses. pronounced jay-sAHn . Note REST APIs usually return information in XML or JSON format; however, JSON is used most often. Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON .org Data Base Camp","title":"What is JSON?"},{"location":"what-is-json/#what-is-json","text":"JSON is a lightweight data-interchange format originally created to hold structured data to be used in JavaScript. JSON is: easy for humans to read and write. easy for machines to parse and generate. based on a subset of the JavaScript programming language. language independent but uses conventions familiar to programmers. the most common format for REST API responses. pronounced jay-sAHn . Note REST APIs usually return information in XML or JSON format; however, JSON is used most often.","title":"What is JSON?"},{"location":"what-is-json/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum JSON .org Data Base Camp","title":"Sources"},{"location":"what-is-nesting-in-json/","text":"Nesting involves putting arrays and objects inside each other, creating multiple layers of collections. You can put arrays inside objects, objects inside arrays, arrays inside arrays, etc. Sometimes a JSON file is one big object with lots of objects and arrays inside of that one top-level object. An array of objects: [ \"object\" , \"object\" , \"object\" ] An array of objects with values: [ { \"name\" : \"Ike\" , \"age\" : 33 }, { \"name\" : \"Cheryl\" , \"age\" : 21 }, { \"name\" : \"Joey\" , \"age\" : 55 } ] An object with an array in the value part of the key-value pair: { \"children\" :[ \"Mike\" , \"Katie\" , \"Tony\" , \"Sally\" ], \"hobbies\" :[ \"running\" , \"jumping\" , \"hiking\" , \"biking\" ] } Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum","title":"What is nesting?"},{"location":"what-is-nesting-in-json/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum","title":"Sources"},{"location":"what-is-postman/","text":"What is Postman? Postman is an API platform for building and using APIs, and generating API documentation. Postman is known as a GUI REST client , meaning it has a graphical user interface and can invoke REST services. For this exercise, we will use Postman to make a GET request for the weather using the OpenWeatherMap API . To use this API, you must create an account and create an API key . How to make a request with Postman Download and install Postman. Open Postman. Click New . Click HTTP Request . Insert the following endpoint into the empty box (\"Enter request URL\") next to GET : https://api.openweathermap.org/data/2.5/weather Click on the tab labelled Params (parameters). It should be displayed by default. Add the following parameters in the respective key and value rows: key : zip / value : 28215 key : units / value : imperial key : appid / value : / e326886bb536c5eac65ccc70df1067bb Note : When you add these parameters, they appear as a query string to the endpoint URL in the GET box. The endpoint now looks like this: https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb Click Send . Success The response (in JSON) appears in the lower pane: { \"coord\" :{ \"lon\" : -80.7387 , \"lat\" : 35.244 }, \"weather\" :[ { \"id\" : 803 , \"main\" : \"Clouds\" , \"description\" : \"broken clouds\" , \"icon\" : \"04d\" } ], \"base\" : \"stations\" , \"main\" :{ \"temp\" : 56.53 , \"feels_like\" : 55.74 , \"temp_min\" : 54.23 , \"temp_max\" : 59.4 , \"pressure\" : 1026 , \"humidity\" : 82 }, \"visibility\" : 10000 , \"wind\" :{ \"speed\" : 8.05 , \"deg\" : 10 }, \"clouds\" :{ \"all\" : 75 }, \"dt\" : 1665408709 , \"sys\" :{ \"type\" : 2 , \"id\" : 2011045 , \"country\" : \"US\" , \"sunrise\" : 1665401084 , \"sunset\" : 1665442490 }, \"timezone\" : -14400 , \"id\" : 0 , \"name\" : \"Charlotte\" , \"cod\" : 200 } How to make the same request with curl In Postman, click on the code ( < / > ) button. Below Code Snippet , select cURL from the dropdown. Copy the code using the Copy snippet button. Paste the code into the command line. Replace the single-quotes around the hyperlink with double-quotes to avoid an error message: curl --location --request GET \"https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb\" Success The unminified (unformatted) response should look like this: { \"coord\" :{ \"lon\" : -80.7387 , \"lat\" : 35.244 }, \"weather\" :[{ \"id\" : 802 , \"main\" : \"Clouds\" , \"description\" : \"scattered clouds\" , \"icon\" : \"03d\" }], \"base\" : \"stations\" , \"main\" :{ \"temp\" : 64.02 , \"feels_like\" : 63.32 , \"temp_min\" : 60.94 , \"temp_max\" : 66.99 , \"pressure\" : 1027 , \"humidity\" : 68 }, \"visibility\" : 10000 , \"wind\" :{ \"speed\" : 10.36 , \"deg\" : 70 }, \"clouds\" :{ \"all\" : 40 }, \"dt\" : 1665416552 , \"sys\" :{ \"type\" : 2 , \"id\" : 2011045 , \"country\" : \"US\" , \"sunrise\" : 1665401084 , \"sunset\" : 1665442490 }, \"timezone\" : -14400 , \"id\" : 0 , \"name\" : \"Charlotte\" , \"cod\" : 200 } How to save a request with Postman In Postman, click the Save button. It is above the Send button. In the Request name box, replace the endpoint with: OpenWeatherMap Current API . Click the Add Description box. Type a description: \u201cgets the current weather for 28215 in imperial units.\u201d Scroll down and click New Collection to create a new folder to save the request in. Type the name of your new collection (\u201cOpenWeatherMap\u201d) in the Name your collection box. Click Create . Click the orange Save button. Success The request has been saved and will now appear in the left-side pane in the Collections tab. How to create a Run in Postman button Click on the Collections tab in the left-side pane. Next to the collection name, select the more actions icon (three dots) and then click Share . Click on the Via Run in Postman tab. Click Embed a static version . Click on the Markdown friendly option. Click Copy code and embed the code below: Sources Documenting APIs: A guide for technical writers and engineers by Tom Johnson Postman Learning Center","title":"What is Postman?"},{"location":"what-is-postman/#what-is-postman","text":"Postman is an API platform for building and using APIs, and generating API documentation. Postman is known as a GUI REST client , meaning it has a graphical user interface and can invoke REST services. For this exercise, we will use Postman to make a GET request for the weather using the OpenWeatherMap API . To use this API, you must create an account and create an API key .","title":"What is Postman?"},{"location":"what-is-postman/#how-to-make-a-request-with-postman","text":"Download and install Postman. Open Postman. Click New . Click HTTP Request . Insert the following endpoint into the empty box (\"Enter request URL\") next to GET : https://api.openweathermap.org/data/2.5/weather Click on the tab labelled Params (parameters). It should be displayed by default. Add the following parameters in the respective key and value rows: key : zip / value : 28215 key : units / value : imperial key : appid / value : / e326886bb536c5eac65ccc70df1067bb Note : When you add these parameters, they appear as a query string to the endpoint URL in the GET box. The endpoint now looks like this: https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb Click Send . Success The response (in JSON) appears in the lower pane: { \"coord\" :{ \"lon\" : -80.7387 , \"lat\" : 35.244 }, \"weather\" :[ { \"id\" : 803 , \"main\" : \"Clouds\" , \"description\" : \"broken clouds\" , \"icon\" : \"04d\" } ], \"base\" : \"stations\" , \"main\" :{ \"temp\" : 56.53 , \"feels_like\" : 55.74 , \"temp_min\" : 54.23 , \"temp_max\" : 59.4 , \"pressure\" : 1026 , \"humidity\" : 82 }, \"visibility\" : 10000 , \"wind\" :{ \"speed\" : 8.05 , \"deg\" : 10 }, \"clouds\" :{ \"all\" : 75 }, \"dt\" : 1665408709 , \"sys\" :{ \"type\" : 2 , \"id\" : 2011045 , \"country\" : \"US\" , \"sunrise\" : 1665401084 , \"sunset\" : 1665442490 }, \"timezone\" : -14400 , \"id\" : 0 , \"name\" : \"Charlotte\" , \"cod\" : 200 }","title":"How to make a request with Postman"},{"location":"what-is-postman/#how-to-make-the-same-request-with-curl","text":"In Postman, click on the code ( < / > ) button. Below Code Snippet , select cURL from the dropdown. Copy the code using the Copy snippet button. Paste the code into the command line. Replace the single-quotes around the hyperlink with double-quotes to avoid an error message: curl --location --request GET \"https://api.openweathermap.org/data/2.5/weather?zip=28215&units=imperial&appid=e326886bb536c5eac65ccc70df1067bb\" Success The unminified (unformatted) response should look like this: { \"coord\" :{ \"lon\" : -80.7387 , \"lat\" : 35.244 }, \"weather\" :[{ \"id\" : 802 , \"main\" : \"Clouds\" , \"description\" : \"scattered clouds\" , \"icon\" : \"03d\" }], \"base\" : \"stations\" , \"main\" :{ \"temp\" : 64.02 , \"feels_like\" : 63.32 , \"temp_min\" : 60.94 , \"temp_max\" : 66.99 , \"pressure\" : 1027 , \"humidity\" : 68 }, \"visibility\" : 10000 , \"wind\" :{ \"speed\" : 10.36 , \"deg\" : 70 }, \"clouds\" :{ \"all\" : 40 }, \"dt\" : 1665416552 , \"sys\" :{ \"type\" : 2 , \"id\" : 2011045 , \"country\" : \"US\" , \"sunrise\" : 1665401084 , \"sunset\" : 1665442490 }, \"timezone\" : -14400 , \"id\" : 0 , \"name\" : \"Charlotte\" , \"cod\" : 200 }","title":"How to make the same request with curl"},{"location":"what-is-postman/#how-to-save-a-request-with-postman","text":"In Postman, click the Save button. It is above the Send button. In the Request name box, replace the endpoint with: OpenWeatherMap Current API . Click the Add Description box. Type a description: \u201cgets the current weather for 28215 in imperial units.\u201d Scroll down and click New Collection to create a new folder to save the request in. Type the name of your new collection (\u201cOpenWeatherMap\u201d) in the Name your collection box. Click Create . Click the orange Save button. Success The request has been saved and will now appear in the left-side pane in the Collections tab.","title":"How to save a request with Postman"},{"location":"what-is-postman/#how-to-create-a-run-in-postman-button","text":"Click on the Collections tab in the left-side pane. Next to the collection name, select the more actions icon (three dots) and then click Share . Click on the Via Run in Postman tab. Click Embed a static version . Click on the Markdown friendly option. Click Copy code and embed the code below:","title":"How to create a Run in Postman button"},{"location":"what-is-postman/#sources","text":"Documenting APIs: A guide for technical writers and engineers by Tom Johnson Postman Learning Center","title":"Sources"},{"location":"what-is-rest/","text":"REST is an architectural-style that refers to more than just APIs. REST describes how a client and a server can interact using HTTP as their form of communication. Think about about what happens when you open a web browser and type in a URL ( http:// ...). What's on the other end of that URL? A resource , that's what. That resource is a representation of something. It's not the thing itself, just a representation of that thing. Trying to download a photo of a dog on a skateboard doesn't actually give you a dog on a skateboard. Just a representation of a dog on a skateboard. Each URL identifies a resource. Or, that's how it's supposed to work. Real life and the internet can both be complicated. Anyway, a client makes an HTTP request to a URL for a resource and receives a representation of that resource in the form of a response. Once the client receives the response, the request is over, and it's almost as if it never happened. REST is defined by four uniform interface constraints: Identifying named resources (data) for requests. These resources are made available through URIs . A URL is a type of URI . The ability to modify or delete the representations of these resources. Self-descriptive messages. Clients and servers can exchange messages with enough information to process each request and response. HATEOAS , a fun acronym that describes how hypermedia is served up to a client like a menu, offering the client all the information they need to make requests. Sources Fielding, Roy Thomas. Architectural Styles and the Design of Network-based Software Architectures . Doctoral dissertation, University of California, Irvine, 2000. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 . Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"What is REST?"},{"location":"what-is-rest/#sources","text":"Fielding, Roy Thomas. Architectural Styles and the Design of Network-based Software Architectures . Doctoral dissertation, University of California, Irvine, 2000. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol -- HTTP /1.1\", RFC 2616, DOI 10.17487/RFC2616, June 1999, https://www.rfc-editor.org/info/rfc2616 . Richardson, L., & Ruby, S. (2013). RESTful web apis .","title":"Sources"},{"location":"what-is-xml/","text":"What is XML ? XML is a markup language, similar to HTML , but without predefined tags. It can be used to hold any kind of structured data. While HTML is designed to display data, XML is designed to carry data. HTTP responses from REST APIs are often in either JSON or XML format; however, JSON is more common and easier to read. XML handles data in two ways: Tags : Tags are \"markup\" that hold content. Tags start with < and end with /> (usually). Attributes : Attributes indicate some property about data ( metadata ). Info The \"X\" in XML stands for \"Extensible,\" meaning that XML is a data format that is flexible and customizable. Sources MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"What is XML?"},{"location":"what-is-xml/#what-is-xml","text":"XML is a markup language, similar to HTML , but without predefined tags. It can be used to hold any kind of structured data. While HTML is designed to display data, XML is designed to carry data. HTTP responses from REST APIs are often in either JSON or XML format; however, JSON is more common and easier to read. XML handles data in two ways: Tags : Tags are \"markup\" that hold content. Tags start with < and end with /> (usually). Attributes : Attributes indicate some property about data ( metadata ). Info The \"X\" in XML stands for \"Extensible,\" meaning that XML is a data format that is flexible and customizable.","title":"What is XML?"},{"location":"what-is-xml/#sources","text":"MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"Sources"},{"location":"xml-vocabulary/","text":"Attributes Attributes contain data related to specific elements in key-value pairs. Content Data stored in between markup tags. Element Tags and the content within tags. Namespaces Namespaces help uniquely identify tags. The namespace acts as a \"prefix\" to a tag. Example <education:onlineCourse> Tags Markup that holds content. Tags start with < and, usually, end with /> . XML A markup language for structured data. XML is similar to HTML , but does not have predefined tags. Sources MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"XML vocabulary"},{"location":"xml-vocabulary/#attributes","text":"Attributes contain data related to specific elements in key-value pairs.","title":"Attributes"},{"location":"xml-vocabulary/#content","text":"Data stored in between markup tags.","title":"Content"},{"location":"xml-vocabulary/#element","text":"Tags and the content within tags.","title":"Element"},{"location":"xml-vocabulary/#namespaces","text":"Namespaces help uniquely identify tags. The namespace acts as a \"prefix\" to a tag. Example <education:onlineCourse>","title":"Namespaces"},{"location":"xml-vocabulary/#tags","text":"Markup that holds content. Tags start with < and, usually, end with /> .","title":"Tags"},{"location":"xml-vocabulary/#xml","text":"A markup language for structured data. XML is similar to HTML , but does not have predefined tags.","title":"XML"},{"location":"xml-vocabulary/#sources","text":"MDN Web Docs Learn API Technical Writing: JSON and XML for Writers by Peter Gruenbaum W3 Schools","title":"Sources"}]}